
DoorLocker_SystemMC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000274c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  0000274c  000027e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080009e  0080009e  0000281e  2**0
                  ALLOC
  3 .stab         000029b8  00000000  00000000  00002820  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016d4  00000000  00000000  000051d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000068ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000069ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000087a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a440  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a82d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000affb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__vector_3>
      10:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 27 10 	jmp	0x204e	; 0x204e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__vector_8>
      24:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 0c 	call	0x1938	; 0x1938 <main>
      8a:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "eeprom.h"

void EEPROM_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(1, 2 , TWI_1);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TWI_init>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	00 d0       	rcall	.+0      	; 0xb64 <EEPROM_writeByte+0x6>
     b64:	00 d0       	rcall	.+0      	; 0xb66 <EEPROM_writeByte+0x8>
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	9a 83       	std	Y+2, r25	; 0x02
     b6c:	89 83       	std	Y+1, r24	; 0x01
     b6e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     b70:	0e 94 71 07 	call	0xee2	; 0xee2 <TWI_start>
    if (TWI_getStatus() != TW_START)
     b74:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_getStatus>
     b78:	88 30       	cpi	r24, 0x08	; 8
     b7a:	11 f0       	breq	.+4      	; 0xb80 <EEPROM_writeByte+0x22>
        return ERROR;
     b7c:	1c 82       	std	Y+4, r1	; 0x04
     b7e:	28 c0       	rjmp	.+80     	; 0xbd0 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	80 70       	andi	r24, 0x00	; 0
     b86:	97 70       	andi	r25, 0x07	; 7
     b88:	88 0f       	add	r24, r24
     b8a:	89 2f       	mov	r24, r25
     b8c:	88 1f       	adc	r24, r24
     b8e:	99 0b       	sbc	r25, r25
     b90:	91 95       	neg	r25
     b92:	80 6a       	ori	r24, 0xA0	; 160
     b94:	0e 94 8c 07 	call	0xf18	; 0xf18 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     b98:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_getStatus>
     b9c:	88 31       	cpi	r24, 0x18	; 24
     b9e:	11 f0       	breq	.+4      	; 0xba4 <EEPROM_writeByte+0x46>
        return ERROR;
     ba0:	1c 82       	std	Y+4, r1	; 0x04
     ba2:	16 c0       	rjmp	.+44     	; 0xbd0 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	0e 94 8c 07 	call	0xf18	; 0xf18 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     baa:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_getStatus>
     bae:	88 32       	cpi	r24, 0x28	; 40
     bb0:	11 f0       	breq	.+4      	; 0xbb6 <EEPROM_writeByte+0x58>
        return ERROR;
     bb2:	1c 82       	std	Y+4, r1	; 0x04
     bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(u8data);
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	0e 94 8c 07 	call	0xf18	; 0xf18 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     bbc:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_getStatus>
     bc0:	88 32       	cpi	r24, 0x28	; 40
     bc2:	11 f0       	breq	.+4      	; 0xbc8 <EEPROM_writeByte+0x6a>
        return ERROR;
     bc4:	1c 82       	std	Y+4, r1	; 0x04
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     bc8:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_stop>

    return SUCCESS;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	8c 83       	std	Y+4, r24	; 0x04
     bd0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <EEPROM_readByte+0x6>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <EEPROM_readByte+0x8>
     be8:	0f 92       	push	r0
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	9a 83       	std	Y+2, r25	; 0x02
     bf0:	89 83       	std	Y+1, r24	; 0x01
     bf2:	7c 83       	std	Y+4, r23	; 0x04
     bf4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     bf6:	0e 94 71 07 	call	0xee2	; 0xee2 <TWI_start>
    if (TWI_getStatus() != TW_START)
     bfa:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_getStatus>
     bfe:	88 30       	cpi	r24, 0x08	; 8
     c00:	11 f0       	breq	.+4      	; 0xc06 <EEPROM_readByte+0x26>
        return ERROR;
     c02:	1d 82       	std	Y+5, r1	; 0x05
     c04:	44 c0       	rjmp	.+136    	; 0xc8e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	80 70       	andi	r24, 0x00	; 0
     c0c:	97 70       	andi	r25, 0x07	; 7
     c0e:	88 0f       	add	r24, r24
     c10:	89 2f       	mov	r24, r25
     c12:	88 1f       	adc	r24, r24
     c14:	99 0b       	sbc	r25, r25
     c16:	91 95       	neg	r25
     c18:	80 6a       	ori	r24, 0xA0	; 160
     c1a:	0e 94 8c 07 	call	0xf18	; 0xf18 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c1e:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_getStatus>
     c22:	88 31       	cpi	r24, 0x18	; 24
     c24:	11 f0       	breq	.+4      	; 0xc2a <EEPROM_readByte+0x4a>
        return ERROR;
     c26:	1d 82       	std	Y+5, r1	; 0x05
     c28:	32 c0       	rjmp	.+100    	; 0xc8e <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	0e 94 8c 07 	call	0xf18	; 0xf18 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c30:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_getStatus>
     c34:	88 32       	cpi	r24, 0x28	; 40
     c36:	11 f0       	breq	.+4      	; 0xc3c <EEPROM_readByte+0x5c>
        return ERROR;
     c38:	1d 82       	std	Y+5, r1	; 0x05
     c3a:	29 c0       	rjmp	.+82     	; 0xc8e <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     c3c:	0e 94 71 07 	call	0xee2	; 0xee2 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     c40:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_getStatus>
     c44:	80 31       	cpi	r24, 0x10	; 16
     c46:	11 f0       	breq	.+4      	; 0xc4c <EEPROM_readByte+0x6c>
        return ERROR;
     c48:	1d 82       	std	Y+5, r1	; 0x05
     c4a:	21 c0       	rjmp	.+66     	; 0xc8e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	80 70       	andi	r24, 0x00	; 0
     c52:	97 70       	andi	r25, 0x07	; 7
     c54:	88 0f       	add	r24, r24
     c56:	89 2f       	mov	r24, r25
     c58:	88 1f       	adc	r24, r24
     c5a:	99 0b       	sbc	r25, r25
     c5c:	91 95       	neg	r25
     c5e:	81 6a       	ori	r24, 0xA1	; 161
     c60:	0e 94 8c 07 	call	0xf18	; 0xf18 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     c64:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_getStatus>
     c68:	80 34       	cpi	r24, 0x40	; 64
     c6a:	11 f0       	breq	.+4      	; 0xc70 <EEPROM_readByte+0x90>
        return ERROR;
     c6c:	1d 82       	std	Y+5, r1	; 0x05
     c6e:	0f c0       	rjmp	.+30     	; 0xc8e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     c70:	0e 94 b6 07 	call	0xf6c	; 0xf6c <TWI_readWithNACK>
     c74:	eb 81       	ldd	r30, Y+3	; 0x03
     c76:	fc 81       	ldd	r31, Y+4	; 0x04
     c78:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     c7a:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_getStatus>
     c7e:	88 35       	cpi	r24, 0x58	; 88
     c80:	11 f0       	breq	.+4      	; 0xc86 <EEPROM_readByte+0xa6>
        return ERROR;
     c82:	1d 82       	std	Y+5, r1	; 0x05
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     c86:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_stop>
    return SUCCESS;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <EEPROM_writeString>:

/* function that write Array of Charracter in Exterrnal EEPROM and return success of all bytes written or Error if any bytes not wrritten */

uint8 EEPROM_writeString ( uint16 address , uint8 * str)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	66 97       	sbiw	r28, 0x16	; 22
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	9b 8b       	std	Y+19, r25	; 0x13
     cb6:	8a 8b       	std	Y+18, r24	; 0x12
     cb8:	7d 8b       	std	Y+21, r23	; 0x15
     cba:	6c 8b       	std	Y+20, r22	; 0x14
	uint8 i=0, write , check;
     cbc:	19 8a       	std	Y+17, r1	; 0x11
     cbe:	8f c0       	rjmp	.+286    	; 0xdde <EEPROM_writeString+0x13e>
	while (str[i] != '\0')
		{
			write = str[i];
     cc0:	89 89       	ldd	r24, Y+17	; 0x11
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	8c 89       	ldd	r24, Y+20	; 0x14
     cc8:	9d 89       	ldd	r25, Y+21	; 0x15
     cca:	fc 01       	movw	r30, r24
     ccc:	e2 0f       	add	r30, r18
     cce:	f3 1f       	adc	r31, r19
     cd0:	80 81       	ld	r24, Z
     cd2:	88 8b       	std	Y+16, r24	; 0x10
			check=EEPROM_writeByte( address + i, write);
     cd4:	89 89       	ldd	r24, Y+17	; 0x11
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	8a 89       	ldd	r24, Y+18	; 0x12
     cdc:	9b 89       	ldd	r25, Y+19	; 0x13
     cde:	82 0f       	add	r24, r18
     ce0:	93 1f       	adc	r25, r19
     ce2:	68 89       	ldd	r22, Y+16	; 0x10
     ce4:	0e 94 af 05 	call	0xb5e	; 0xb5e <EEPROM_writeByte>
     ce8:	8f 87       	std	Y+15, r24	; 0x0f
			if (check == ERROR)
     cea:	8f 85       	ldd	r24, Y+15	; 0x0f
     cec:	88 23       	and	r24, r24
     cee:	11 f4       	brne	.+4      	; 0xcf4 <EEPROM_writeString+0x54>
				return ERROR;
     cf0:	1e 8a       	std	Y+22, r1	; 0x16
     cf2:	83 c0       	rjmp	.+262    	; 0xdfa <EEPROM_writeString+0x15a>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a8 e4       	ldi	r26, 0x48	; 72
     cfa:	b2 e4       	ldi	r27, 0x42	; 66
     cfc:	8b 87       	std	Y+11, r24	; 0x0b
     cfe:	9c 87       	std	Y+12, r25	; 0x0c
     d00:	ad 87       	std	Y+13, r26	; 0x0d
     d02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d04:	6b 85       	ldd	r22, Y+11	; 0x0b
     d06:	7c 85       	ldd	r23, Y+12	; 0x0c
     d08:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	4a e7       	ldi	r20, 0x7A	; 122
     d12:	53 e4       	ldi	r21, 0x43	; 67
     d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	8f 83       	std	Y+7, r24	; 0x07
     d1e:	98 87       	std	Y+8, r25	; 0x08
     d20:	a9 87       	std	Y+9, r26	; 0x09
     d22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d24:	6f 81       	ldd	r22, Y+7	; 0x07
     d26:	78 85       	ldd	r23, Y+8	; 0x08
     d28:	89 85       	ldd	r24, Y+9	; 0x09
     d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5f e3       	ldi	r21, 0x3F	; 63
     d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d38:	88 23       	and	r24, r24
     d3a:	2c f4       	brge	.+10     	; 0xd46 <EEPROM_writeString+0xa6>
		__ticks = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	9e 83       	std	Y+6, r25	; 0x06
     d42:	8d 83       	std	Y+5, r24	; 0x05
     d44:	3f c0       	rjmp	.+126    	; 0xdc4 <EEPROM_writeString+0x124>
	else if (__tmp > 65535)
     d46:	6f 81       	ldd	r22, Y+7	; 0x07
     d48:	78 85       	ldd	r23, Y+8	; 0x08
     d4a:	89 85       	ldd	r24, Y+9	; 0x09
     d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	3f ef       	ldi	r19, 0xFF	; 255
     d52:	4f e7       	ldi	r20, 0x7F	; 127
     d54:	57 e4       	ldi	r21, 0x47	; 71
     d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d5a:	18 16       	cp	r1, r24
     d5c:	4c f5       	brge	.+82     	; 0xdb0 <EEPROM_writeString+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d60:	7c 85       	ldd	r23, Y+12	; 0x0c
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e2       	ldi	r20, 0x20	; 32
     d6c:	51 e4       	ldi	r21, 0x41	; 65
     d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	bc 01       	movw	r22, r24
     d78:	cd 01       	movw	r24, r26
     d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	8d 83       	std	Y+5, r24	; 0x05
     d86:	0f c0       	rjmp	.+30     	; 0xda6 <EEPROM_writeString+0x106>
     d88:	89 e1       	ldi	r24, 0x19	; 25
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9c 83       	std	Y+4, r25	; 0x04
     d8e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <EEPROM_writeString+0xf4>
     d98:	9c 83       	std	Y+4, r25	; 0x04
     d9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	9e 81       	ldd	r25, Y+6	; 0x06
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	69 f7       	brne	.-38     	; 0xd88 <EEPROM_writeString+0xe8>
     dae:	14 c0       	rjmp	.+40     	; 0xdd8 <EEPROM_writeString+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db0:	6f 81       	ldd	r22, Y+7	; 0x07
     db2:	78 85       	ldd	r23, Y+8	; 0x08
     db4:	89 85       	ldd	r24, Y+9	; 0x09
     db6:	9a 85       	ldd	r25, Y+10	; 0x0a
     db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	9e 83       	std	Y+6, r25	; 0x06
     dc2:	8d 83       	std	Y+5, r24	; 0x05
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <EEPROM_writeString+0x130>
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			i++;
     dd8:	89 89       	ldd	r24, Y+17	; 0x11
     dda:	8f 5f       	subi	r24, 0xFF	; 255
     ddc:	89 8b       	std	Y+17, r24	; 0x11
/* function that write Array of Charracter in Exterrnal EEPROM and return success of all bytes written or Error if any bytes not wrritten */

uint8 EEPROM_writeString ( uint16 address , uint8 * str)
{
	uint8 i=0, write , check;
	while (str[i] != '\0')
     dde:	89 89       	ldd	r24, Y+17	; 0x11
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	8c 89       	ldd	r24, Y+20	; 0x14
     de6:	9d 89       	ldd	r25, Y+21	; 0x15
     de8:	fc 01       	movw	r30, r24
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	80 81       	ld	r24, Z
     df0:	88 23       	and	r24, r24
     df2:	09 f0       	breq	.+2      	; 0xdf6 <EEPROM_writeString+0x156>
     df4:	65 cf       	rjmp	.-310    	; 0xcc0 <EEPROM_writeString+0x20>
			if (check == ERROR)
				return ERROR;
			_delay_ms(50);
			i++;
		}
	return SUCCESS;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	8e 8b       	std	Y+22, r24	; 0x16
     dfa:	8e 89       	ldd	r24, Y+22	; 0x16
}
     dfc:	66 96       	adiw	r28, 0x16	; 22
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <EEPROM_readString>:

/* function that read Array of Charracter from Exterrnal EEPROM and return success of all bytes read or Error if any bytes not read */
uint8 EEPROM_readString(uint16 address , uint8 * str ,uint8 strSize)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	29 97       	sbiw	r28, 0x09	; 9
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	9d 83       	std	Y+5, r25	; 0x05
     e24:	8c 83       	std	Y+4, r24	; 0x04
     e26:	7f 83       	std	Y+7, r23	; 0x07
     e28:	6e 83       	std	Y+6, r22	; 0x06
     e2a:	48 87       	std	Y+8, r20	; 0x08
	uint8 i , read , check;
	for (i = 0; i < strSize; i++)
     e2c:	1a 82       	std	Y+2, r1	; 0x02
     e2e:	20 c0       	rjmp	.+64     	; 0xe70 <EEPROM_readString+0x62>
	{
		check =EEPROM_readByte( address + i, &read);
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	9d 81       	ldd	r25, Y+5	; 0x05
     e3a:	82 0f       	add	r24, r18
     e3c:	93 1f       	adc	r25, r19
     e3e:	9e 01       	movw	r18, r28
     e40:	2d 5f       	subi	r18, 0xFD	; 253
     e42:	3f 4f       	sbci	r19, 0xFF	; 255
     e44:	b9 01       	movw	r22, r18
     e46:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <EEPROM_readByte>
     e4a:	89 83       	std	Y+1, r24	; 0x01
		if (check == ERROR)
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	88 23       	and	r24, r24
     e50:	11 f4       	brne	.+4      	; 0xe56 <EEPROM_readString+0x48>
			return ERROR;
     e52:	19 86       	std	Y+9, r1	; 0x09
     e54:	18 c0       	rjmp	.+48     	; 0xe86 <EEPROM_readString+0x78>
		 str[i] = read;
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	9f 81       	ldd	r25, Y+7	; 0x07
     e60:	fc 01       	movw	r30, r24
     e62:	e2 0f       	add	r30, r18
     e64:	f3 1f       	adc	r31, r19
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	80 83       	st	Z, r24

/* function that read Array of Charracter from Exterrnal EEPROM and return success of all bytes read or Error if any bytes not read */
uint8 EEPROM_readString(uint16 address , uint8 * str ,uint8 strSize)
{
	uint8 i , read , check;
	for (i = 0; i < strSize; i++)
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	8a 83       	std	Y+2, r24	; 0x02
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	88 85       	ldd	r24, Y+8	; 0x08
     e74:	98 17       	cp	r25, r24
     e76:	e0 f2       	brcs	.-72     	; 0xe30 <EEPROM_readString+0x22>
		check =EEPROM_readByte( address + i, &read);
		if (check == ERROR)
			return ERROR;
		 str[i] = read;
	}
	str[5] = '\0';
     e78:	8e 81       	ldd	r24, Y+6	; 0x06
     e7a:	9f 81       	ldd	r25, Y+7	; 0x07
     e7c:	fc 01       	movw	r30, r24
     e7e:	35 96       	adiw	r30, 0x05	; 5
     e80:	10 82       	st	Z, r1
	return SUCCESS;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	89 87       	std	Y+9, r24	; 0x09
     e86:	89 85       	ldd	r24, Y+9	; 0x09
}
     e88:	29 96       	adiw	r28, 0x09	; 9
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <TWI_init>:
 * 	3. Set the required de.
 * 	4. Enable I2C.
 */

void TWI_init(uint8 a_deviceAddress  , uint8 a_bitRate , TWI_prescaler prescaler) //
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <TWI_init+0x6>
     ea0:	0f 92       	push	r0
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	6a 83       	std	Y+2, r22	; 0x02
     eaa:	4b 83       	std	Y+3, r20	; 0x03
	TWBR= a_bitRate;
     eac:	e0 e2       	ldi	r30, 0x20	; 32
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	80 83       	st	Z, r24
	TWSR |= prescaler; // (TWSR & 0XFC) | (prescaler) prescaler
     eb4:	a1 e2       	ldi	r26, 0x21	; 33
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e1 e2       	ldi	r30, 0x21	; 33
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	90 81       	ld	r25, Z
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	89 2b       	or	r24, r25
     ec2:	8c 93       	st	X, r24
	TWCR =(1<<TWEN);
     ec4:	e6 e5       	ldi	r30, 0x56	; 86
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	80 83       	st	Z, r24
	TWAR = (a_deviceAddress <<TWA0 ); //((a_deviceAddress & 0X7f) <<TWA0)
     ecc:	e2 e2       	ldi	r30, 0x22	; 34
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	88 0f       	add	r24, r24
     ed4:	80 83       	st	Z, r24
#if INTERRUPT
	TWCR |=(1<<TWIE);
#endif
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <TWI_start>:

void TWI_start()
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62

# if INTERRUPT
	if (g_TWIFlag ==1)
		TWCR =(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
#else
	TWCR =(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     eea:	e6 e5       	ldi	r30, 0x56	; 86
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	84 ea       	ldi	r24, 0xA4	; 164
     ef0:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR , TWINT));
     ef2:	e6 e5       	ldi	r30, 0x56	; 86
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 23       	and	r24, r24
     efa:	dc f7       	brge	.-10     	; 0xef2 <TWI_start+0x10>
#endif
}
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <TWI_stop>:

void TWI_stop()
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR =(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     f0a:	e6 e5       	ldi	r30, 0x56	; 86
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	84 e9       	ldi	r24, 0x94	; 148
     f10:	80 83       	st	Z, r24
#endif
}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <TWI_write>:
void TWI_write(uint8 data)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	0f 92       	push	r0
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR= data;
     f24:	e3 e2       	ldi	r30, 0x23	; 35
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR =(1<<TWINT)|(1<<TWEN);
     f2c:	e6 e5       	ldi	r30, 0x56	; 86
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	84 e8       	ldi	r24, 0x84	; 132
     f32:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR , TWINT));
     f34:	e6 e5       	ldi	r30, 0x56	; 86
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	88 23       	and	r24, r24
     f3c:	dc f7       	brge	.-10     	; 0xf34 <TWI_write+0x1c>
}
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <TWI_readWithACK>:

uint8 TWI_readWithACK()
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
     * Enable sending ACK after reading or receiving data TWEA=1
     * Enable TWI Module TWEN=1
	 */
	TWCR =(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     f4e:	e6 e5       	ldi	r30, 0x56	; 86
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	84 ec       	ldi	r24, 0xC4	; 196
     f54:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR , TWINT));
     f56:	e6 e5       	ldi	r30, 0x56	; 86
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 23       	and	r24, r24
     f5e:	dc f7       	brge	.-10     	; 0xf56 <TWI_readWithACK+0x10>
	/* Read Data */
	return TWDR;
     f60:	e3 e2       	ldi	r30, 0x23	; 35
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <TWI_readWithNACK>:
uint8 TWI_readWithNACK()
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR =(1<<TWINT)|(1<<TWEN);
     f74:	e6 e5       	ldi	r30, 0x56	; 86
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	84 e8       	ldi	r24, 0x84	; 132
     f7a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR , TWINT));
     f7c:	e6 e5       	ldi	r30, 0x56	; 86
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	88 23       	and	r24, r24
     f84:	dc f7       	brge	.-10     	; 0xf7c <TWI_readWithNACK+0x10>
	 /* Read Data */
	return TWDR;
     f86:	e3 e2       	ldi	r30, 0x23	; 35
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <TWI_getStatus>:

uint8 TWI_getStatus()
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	0f 92       	push	r0
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	uint8 status = (TWSR & 0XF8);
     f9c:	e1 e2       	ldi	r30, 0x21	; 33
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	88 7f       	andi	r24, 0xF8	; 248
     fa4:	89 83       	std	Y+1, r24	; 0x01
	return status;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
     fb8:	ea e3       	ldi	r30, 0x3A	; 58
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     fc0:	a7 e3       	ldi	r26, 0x37	; 55
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e3       	ldi	r30, 0x37	; 55
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	87 60       	ori	r24, 0x07	; 7
     fcc:	8c 93       	st	X, r24

	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     fce:	88 e3       	ldi	r24, 0x38	; 56
     fd0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LCD_sendCommand>

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     fd4:	8c e0       	ldi	r24, 0x0C	; 12
     fd6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LCD_sendCommand>

	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LCD_sendCommand>
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	e9 97       	sbiw	r28, 0x39	; 57
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     ffc:	a8 e3       	ldi	r26, 0x38	; 56
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e8 e3       	ldi	r30, 0x38	; 56
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8e 7f       	andi	r24, 0xFE	; 254
    1008:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    100a:	a8 e3       	ldi	r26, 0x38	; 56
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 e3       	ldi	r30, 0x38	; 56
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8d 7f       	andi	r24, 0xFD	; 253
    1016:	8c 93       	st	X, r24
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e8       	ldi	r26, 0x80	; 128
    101e:	bf e3       	ldi	r27, 0x3F	; 63
    1020:	8d ab       	std	Y+53, r24	; 0x35
    1022:	9e ab       	std	Y+54, r25	; 0x36
    1024:	af ab       	std	Y+55, r26	; 0x37
    1026:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1028:	6d a9       	ldd	r22, Y+53	; 0x35
    102a:	7e a9       	ldd	r23, Y+54	; 0x36
    102c:	8f a9       	ldd	r24, Y+55	; 0x37
    102e:	98 ad       	ldd	r25, Y+56	; 0x38
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	4a e7       	ldi	r20, 0x7A	; 122
    1036:	53 e4       	ldi	r21, 0x43	; 67
    1038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	89 ab       	std	Y+49, r24	; 0x31
    1042:	9a ab       	std	Y+50, r25	; 0x32
    1044:	ab ab       	std	Y+51, r26	; 0x33
    1046:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1048:	69 a9       	ldd	r22, Y+49	; 0x31
    104a:	7a a9       	ldd	r23, Y+50	; 0x32
    104c:	8b a9       	ldd	r24, Y+51	; 0x33
    104e:	9c a9       	ldd	r25, Y+52	; 0x34
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e8       	ldi	r20, 0x80	; 128
    1056:	5f e3       	ldi	r21, 0x3F	; 63
    1058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    105c:	88 23       	and	r24, r24
    105e:	2c f4       	brge	.+10     	; 0x106a <LCD_sendCommand+0x84>
		__ticks = 1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	98 ab       	std	Y+48, r25	; 0x30
    1066:	8f a7       	std	Y+47, r24	; 0x2f
    1068:	3f c0       	rjmp	.+126    	; 0x10e8 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    106a:	69 a9       	ldd	r22, Y+49	; 0x31
    106c:	7a a9       	ldd	r23, Y+50	; 0x32
    106e:	8b a9       	ldd	r24, Y+51	; 0x33
    1070:	9c a9       	ldd	r25, Y+52	; 0x34
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	3f ef       	ldi	r19, 0xFF	; 255
    1076:	4f e7       	ldi	r20, 0x7F	; 127
    1078:	57 e4       	ldi	r21, 0x47	; 71
    107a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    107e:	18 16       	cp	r1, r24
    1080:	4c f5       	brge	.+82     	; 0x10d4 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1082:	6d a9       	ldd	r22, Y+53	; 0x35
    1084:	7e a9       	ldd	r23, Y+54	; 0x36
    1086:	8f a9       	ldd	r24, Y+55	; 0x37
    1088:	98 ad       	ldd	r25, Y+56	; 0x38
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e2       	ldi	r20, 0x20	; 32
    1090:	51 e4       	ldi	r21, 0x41	; 65
    1092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	98 ab       	std	Y+48, r25	; 0x30
    10a8:	8f a7       	std	Y+47, r24	; 0x2f
    10aa:	0f c0       	rjmp	.+30     	; 0x10ca <LCD_sendCommand+0xe4>
    10ac:	89 e1       	ldi	r24, 0x19	; 25
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9e a7       	std	Y+46, r25	; 0x2e
    10b2:	8d a7       	std	Y+45, r24	; 0x2d
    10b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    10b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <LCD_sendCommand+0xd2>
    10bc:	9e a7       	std	Y+46, r25	; 0x2e
    10be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10c2:	98 a9       	ldd	r25, Y+48	; 0x30
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	98 ab       	std	Y+48, r25	; 0x30
    10c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    10cc:	98 a9       	ldd	r25, Y+48	; 0x30
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	69 f7       	brne	.-38     	; 0x10ac <LCD_sendCommand+0xc6>
    10d2:	14 c0       	rjmp	.+40     	; 0x10fc <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d4:	69 a9       	ldd	r22, Y+49	; 0x31
    10d6:	7a a9       	ldd	r23, Y+50	; 0x32
    10d8:	8b a9       	ldd	r24, Y+51	; 0x33
    10da:	9c a9       	ldd	r25, Y+52	; 0x34
    10dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	98 ab       	std	Y+48, r25	; 0x30
    10e6:	8f a7       	std	Y+47, r24	; 0x2f
    10e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ea:	98 a9       	ldd	r25, Y+48	; 0x30
    10ec:	9c a7       	std	Y+44, r25	; 0x2c
    10ee:	8b a7       	std	Y+43, r24	; 0x2b
    10f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <LCD_sendCommand+0x10e>
    10f8:	9c a7       	std	Y+44, r25	; 0x2c
    10fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    10fc:	a8 e3       	ldi	r26, 0x38	; 56
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e3       	ldi	r30, 0x38	; 56
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	84 60       	ori	r24, 0x04	; 4
    1108:	8c 93       	st	X, r24
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a0 e8       	ldi	r26, 0x80	; 128
    1110:	bf e3       	ldi	r27, 0x3F	; 63
    1112:	8f a3       	std	Y+39, r24	; 0x27
    1114:	98 a7       	std	Y+40, r25	; 0x28
    1116:	a9 a7       	std	Y+41, r26	; 0x29
    1118:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111a:	6f a1       	ldd	r22, Y+39	; 0x27
    111c:	78 a5       	ldd	r23, Y+40	; 0x28
    111e:	89 a5       	ldd	r24, Y+41	; 0x29
    1120:	9a a5       	ldd	r25, Y+42	; 0x2a
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	4a e7       	ldi	r20, 0x7A	; 122
    1128:	53 e4       	ldi	r21, 0x43	; 67
    112a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	8b a3       	std	Y+35, r24	; 0x23
    1134:	9c a3       	std	Y+36, r25	; 0x24
    1136:	ad a3       	std	Y+37, r26	; 0x25
    1138:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    113a:	6b a1       	ldd	r22, Y+35	; 0x23
    113c:	7c a1       	ldd	r23, Y+36	; 0x24
    113e:	8d a1       	ldd	r24, Y+37	; 0x25
    1140:	9e a1       	ldd	r25, Y+38	; 0x26
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	5f e3       	ldi	r21, 0x3F	; 63
    114a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    114e:	88 23       	and	r24, r24
    1150:	2c f4       	brge	.+10     	; 0x115c <LCD_sendCommand+0x176>
		__ticks = 1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9a a3       	std	Y+34, r25	; 0x22
    1158:	89 a3       	std	Y+33, r24	; 0x21
    115a:	3f c0       	rjmp	.+126    	; 0x11da <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    115c:	6b a1       	ldd	r22, Y+35	; 0x23
    115e:	7c a1       	ldd	r23, Y+36	; 0x24
    1160:	8d a1       	ldd	r24, Y+37	; 0x25
    1162:	9e a1       	ldd	r25, Y+38	; 0x26
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	3f ef       	ldi	r19, 0xFF	; 255
    1168:	4f e7       	ldi	r20, 0x7F	; 127
    116a:	57 e4       	ldi	r21, 0x47	; 71
    116c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1170:	18 16       	cp	r1, r24
    1172:	4c f5       	brge	.+82     	; 0x11c6 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1174:	6f a1       	ldd	r22, Y+39	; 0x27
    1176:	78 a5       	ldd	r23, Y+40	; 0x28
    1178:	89 a5       	ldd	r24, Y+41	; 0x29
    117a:	9a a5       	ldd	r25, Y+42	; 0x2a
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e2       	ldi	r20, 0x20	; 32
    1182:	51 e4       	ldi	r21, 0x41	; 65
    1184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	9a a3       	std	Y+34, r25	; 0x22
    119a:	89 a3       	std	Y+33, r24	; 0x21
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <LCD_sendCommand+0x1d6>
    119e:	89 e1       	ldi	r24, 0x19	; 25
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	98 a3       	std	Y+32, r25	; 0x20
    11a4:	8f 8f       	std	Y+31, r24	; 0x1f
    11a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11a8:	98 a1       	ldd	r25, Y+32	; 0x20
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <LCD_sendCommand+0x1c4>
    11ae:	98 a3       	std	Y+32, r25	; 0x20
    11b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b2:	89 a1       	ldd	r24, Y+33	; 0x21
    11b4:	9a a1       	ldd	r25, Y+34	; 0x22
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	9a a3       	std	Y+34, r25	; 0x22
    11ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11bc:	89 a1       	ldd	r24, Y+33	; 0x21
    11be:	9a a1       	ldd	r25, Y+34	; 0x22
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	69 f7       	brne	.-38     	; 0x119e <LCD_sendCommand+0x1b8>
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c6:	6b a1       	ldd	r22, Y+35	; 0x23
    11c8:	7c a1       	ldd	r23, Y+36	; 0x24
    11ca:	8d a1       	ldd	r24, Y+37	; 0x25
    11cc:	9e a1       	ldd	r25, Y+38	; 0x26
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9a a3       	std	Y+34, r25	; 0x22
    11d8:	89 a3       	std	Y+33, r24	; 0x21
    11da:	89 a1       	ldd	r24, Y+33	; 0x21
    11dc:	9a a1       	ldd	r25, Y+34	; 0x22
    11de:	9e 8f       	std	Y+30, r25	; 0x1e
    11e0:	8d 8f       	std	Y+29, r24	; 0x1d
    11e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <LCD_sendCommand+0x200>
    11ea:	9e 8f       	std	Y+30, r25	; 0x1e
    11ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    11ee:	eb e3       	ldi	r30, 0x3B	; 59
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	89 ad       	ldd	r24, Y+57	; 0x39
    11f4:	80 83       	st	Z, r24
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 e8       	ldi	r26, 0x80	; 128
    11fc:	bf e3       	ldi	r27, 0x3F	; 63
    11fe:	89 8f       	std	Y+25, r24	; 0x19
    1200:	9a 8f       	std	Y+26, r25	; 0x1a
    1202:	ab 8f       	std	Y+27, r26	; 0x1b
    1204:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1206:	69 8d       	ldd	r22, Y+25	; 0x19
    1208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    120a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    120c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	4a e7       	ldi	r20, 0x7A	; 122
    1214:	53 e4       	ldi	r21, 0x43	; 67
    1216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	8d 8b       	std	Y+21, r24	; 0x15
    1220:	9e 8b       	std	Y+22, r25	; 0x16
    1222:	af 8b       	std	Y+23, r26	; 0x17
    1224:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1226:	6d 89       	ldd	r22, Y+21	; 0x15
    1228:	7e 89       	ldd	r23, Y+22	; 0x16
    122a:	8f 89       	ldd	r24, Y+23	; 0x17
    122c:	98 8d       	ldd	r25, Y+24	; 0x18
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e8       	ldi	r20, 0x80	; 128
    1234:	5f e3       	ldi	r21, 0x3F	; 63
    1236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    123a:	88 23       	and	r24, r24
    123c:	2c f4       	brge	.+10     	; 0x1248 <LCD_sendCommand+0x262>
		__ticks = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9c 8b       	std	Y+20, r25	; 0x14
    1244:	8b 8b       	std	Y+19, r24	; 0x13
    1246:	3f c0       	rjmp	.+126    	; 0x12c6 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1248:	6d 89       	ldd	r22, Y+21	; 0x15
    124a:	7e 89       	ldd	r23, Y+22	; 0x16
    124c:	8f 89       	ldd	r24, Y+23	; 0x17
    124e:	98 8d       	ldd	r25, Y+24	; 0x18
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	3f ef       	ldi	r19, 0xFF	; 255
    1254:	4f e7       	ldi	r20, 0x7F	; 127
    1256:	57 e4       	ldi	r21, 0x47	; 71
    1258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    125c:	18 16       	cp	r1, r24
    125e:	4c f5       	brge	.+82     	; 0x12b2 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1260:	69 8d       	ldd	r22, Y+25	; 0x19
    1262:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1266:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e2       	ldi	r20, 0x20	; 32
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9c 8b       	std	Y+20, r25	; 0x14
    1286:	8b 8b       	std	Y+19, r24	; 0x13
    1288:	0f c0       	rjmp	.+30     	; 0x12a8 <LCD_sendCommand+0x2c2>
    128a:	89 e1       	ldi	r24, 0x19	; 25
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9a 8b       	std	Y+18, r25	; 0x12
    1290:	89 8b       	std	Y+17, r24	; 0x11
    1292:	89 89       	ldd	r24, Y+17	; 0x11
    1294:	9a 89       	ldd	r25, Y+18	; 0x12
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <LCD_sendCommand+0x2b0>
    129a:	9a 8b       	std	Y+18, r25	; 0x12
    129c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129e:	8b 89       	ldd	r24, Y+19	; 0x13
    12a0:	9c 89       	ldd	r25, Y+20	; 0x14
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	9c 8b       	std	Y+20, r25	; 0x14
    12a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a8:	8b 89       	ldd	r24, Y+19	; 0x13
    12aa:	9c 89       	ldd	r25, Y+20	; 0x14
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	69 f7       	brne	.-38     	; 0x128a <LCD_sendCommand+0x2a4>
    12b0:	14 c0       	rjmp	.+40     	; 0x12da <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b2:	6d 89       	ldd	r22, Y+21	; 0x15
    12b4:	7e 89       	ldd	r23, Y+22	; 0x16
    12b6:	8f 89       	ldd	r24, Y+23	; 0x17
    12b8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9c 8b       	std	Y+20, r25	; 0x14
    12c4:	8b 8b       	std	Y+19, r24	; 0x13
    12c6:	8b 89       	ldd	r24, Y+19	; 0x13
    12c8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ca:	98 8b       	std	Y+16, r25	; 0x10
    12cc:	8f 87       	std	Y+15, r24	; 0x0f
    12ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d0:	98 89       	ldd	r25, Y+16	; 0x10
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <LCD_sendCommand+0x2ec>
    12d6:	98 8b       	std	Y+16, r25	; 0x10
    12d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    12da:	a8 e3       	ldi	r26, 0x38	; 56
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e8 e3       	ldi	r30, 0x38	; 56
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8b 7f       	andi	r24, 0xFB	; 251
    12e6:	8c 93       	st	X, r24
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a0 e8       	ldi	r26, 0x80	; 128
    12ee:	bf e3       	ldi	r27, 0x3F	; 63
    12f0:	8b 87       	std	Y+11, r24	; 0x0b
    12f2:	9c 87       	std	Y+12, r25	; 0x0c
    12f4:	ad 87       	std	Y+13, r26	; 0x0d
    12f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a e7       	ldi	r20, 0x7A	; 122
    1306:	53 e4       	ldi	r21, 0x43	; 67
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8f 83       	std	Y+7, r24	; 0x07
    1312:	98 87       	std	Y+8, r25	; 0x08
    1314:	a9 87       	std	Y+9, r26	; 0x09
    1316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e8       	ldi	r20, 0x80	; 128
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132c:	88 23       	and	r24, r24
    132e:	2c f4       	brge	.+10     	; 0x133a <LCD_sendCommand+0x354>
		__ticks = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
    1338:	3f c0       	rjmp	.+126    	; 0x13b8 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    133a:	6f 81       	ldd	r22, Y+7	; 0x07
    133c:	78 85       	ldd	r23, Y+8	; 0x08
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	3f ef       	ldi	r19, 0xFF	; 255
    1346:	4f e7       	ldi	r20, 0x7F	; 127
    1348:	57 e4       	ldi	r21, 0x47	; 71
    134a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    134e:	18 16       	cp	r1, r24
    1350:	4c f5       	brge	.+82     	; 0x13a4 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1352:	6b 85       	ldd	r22, Y+11	; 0x0b
    1354:	7c 85       	ldd	r23, Y+12	; 0x0c
    1356:	8d 85       	ldd	r24, Y+13	; 0x0d
    1358:	9e 85       	ldd	r25, Y+14	; 0x0e
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	0f c0       	rjmp	.+30     	; 0x139a <LCD_sendCommand+0x3b4>
    137c:	89 e1       	ldi	r24, 0x19	; 25
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <LCD_sendCommand+0x3a2>
    138c:	9c 83       	std	Y+4, r25	; 0x04
    138e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	69 f7       	brne	.-38     	; 0x137c <LCD_sendCommand+0x396>
    13a2:	14 c0       	rjmp	.+40     	; 0x13cc <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <LCD_sendCommand+0x3de>
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    13cc:	e9 96       	adiw	r28, 0x39	; 57
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	e9 97       	sbiw	r28, 0x39	; 57
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    13f4:	a8 e3       	ldi	r26, 0x38	; 56
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e8 e3       	ldi	r30, 0x38	; 56
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	81 60       	ori	r24, 0x01	; 1
    1400:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1402:	a8 e3       	ldi	r26, 0x38	; 56
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e8 e3       	ldi	r30, 0x38	; 56
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8d 7f       	andi	r24, 0xFD	; 253
    140e:	8c 93       	st	X, r24
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e8       	ldi	r26, 0x80	; 128
    1416:	bf e3       	ldi	r27, 0x3F	; 63
    1418:	8d ab       	std	Y+53, r24	; 0x35
    141a:	9e ab       	std	Y+54, r25	; 0x36
    141c:	af ab       	std	Y+55, r26	; 0x37
    141e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1420:	6d a9       	ldd	r22, Y+53	; 0x35
    1422:	7e a9       	ldd	r23, Y+54	; 0x36
    1424:	8f a9       	ldd	r24, Y+55	; 0x37
    1426:	98 ad       	ldd	r25, Y+56	; 0x38
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	4a e7       	ldi	r20, 0x7A	; 122
    142e:	53 e4       	ldi	r21, 0x43	; 67
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	89 ab       	std	Y+49, r24	; 0x31
    143a:	9a ab       	std	Y+50, r25	; 0x32
    143c:	ab ab       	std	Y+51, r26	; 0x33
    143e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1440:	69 a9       	ldd	r22, Y+49	; 0x31
    1442:	7a a9       	ldd	r23, Y+50	; 0x32
    1444:	8b a9       	ldd	r24, Y+51	; 0x33
    1446:	9c a9       	ldd	r25, Y+52	; 0x34
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	5f e3       	ldi	r21, 0x3F	; 63
    1450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1454:	88 23       	and	r24, r24
    1456:	2c f4       	brge	.+10     	; 0x1462 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	98 ab       	std	Y+48, r25	; 0x30
    145e:	8f a7       	std	Y+47, r24	; 0x2f
    1460:	3f c0       	rjmp	.+126    	; 0x14e0 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1462:	69 a9       	ldd	r22, Y+49	; 0x31
    1464:	7a a9       	ldd	r23, Y+50	; 0x32
    1466:	8b a9       	ldd	r24, Y+51	; 0x33
    1468:	9c a9       	ldd	r25, Y+52	; 0x34
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	3f ef       	ldi	r19, 0xFF	; 255
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	57 e4       	ldi	r21, 0x47	; 71
    1472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	4c f5       	brge	.+82     	; 0x14cc <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147a:	6d a9       	ldd	r22, Y+53	; 0x35
    147c:	7e a9       	ldd	r23, Y+54	; 0x36
    147e:	8f a9       	ldd	r24, Y+55	; 0x37
    1480:	98 ad       	ldd	r25, Y+56	; 0x38
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e2       	ldi	r20, 0x20	; 32
    1488:	51 e4       	ldi	r21, 0x41	; 65
    148a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	98 ab       	std	Y+48, r25	; 0x30
    14a0:	8f a7       	std	Y+47, r24	; 0x2f
    14a2:	0f c0       	rjmp	.+30     	; 0x14c2 <LCD_displayCharacter+0xe4>
    14a4:	89 e1       	ldi	r24, 0x19	; 25
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9e a7       	std	Y+46, r25	; 0x2e
    14aa:	8d a7       	std	Y+45, r24	; 0x2d
    14ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    14ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <LCD_displayCharacter+0xd2>
    14b4:	9e a7       	std	Y+46, r25	; 0x2e
    14b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ba:	98 a9       	ldd	r25, Y+48	; 0x30
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	98 ab       	std	Y+48, r25	; 0x30
    14c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c4:	98 a9       	ldd	r25, Y+48	; 0x30
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f7       	brne	.-38     	; 0x14a4 <LCD_displayCharacter+0xc6>
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14cc:	69 a9       	ldd	r22, Y+49	; 0x31
    14ce:	7a a9       	ldd	r23, Y+50	; 0x32
    14d0:	8b a9       	ldd	r24, Y+51	; 0x33
    14d2:	9c a9       	ldd	r25, Y+52	; 0x34
    14d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	98 ab       	std	Y+48, r25	; 0x30
    14de:	8f a7       	std	Y+47, r24	; 0x2f
    14e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e2:	98 a9       	ldd	r25, Y+48	; 0x30
    14e4:	9c a7       	std	Y+44, r25	; 0x2c
    14e6:	8b a7       	std	Y+43, r24	; 0x2b
    14e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <LCD_displayCharacter+0x10e>
    14f0:	9c a7       	std	Y+44, r25	; 0x2c
    14f2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    14f4:	a8 e3       	ldi	r26, 0x38	; 56
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e8 e3       	ldi	r30, 0x38	; 56
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	84 60       	ori	r24, 0x04	; 4
    1500:	8c 93       	st	X, r24
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e8       	ldi	r26, 0x80	; 128
    1508:	bf e3       	ldi	r27, 0x3F	; 63
    150a:	8f a3       	std	Y+39, r24	; 0x27
    150c:	98 a7       	std	Y+40, r25	; 0x28
    150e:	a9 a7       	std	Y+41, r26	; 0x29
    1510:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1512:	6f a1       	ldd	r22, Y+39	; 0x27
    1514:	78 a5       	ldd	r23, Y+40	; 0x28
    1516:	89 a5       	ldd	r24, Y+41	; 0x29
    1518:	9a a5       	ldd	r25, Y+42	; 0x2a
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	4a e7       	ldi	r20, 0x7A	; 122
    1520:	53 e4       	ldi	r21, 0x43	; 67
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8b a3       	std	Y+35, r24	; 0x23
    152c:	9c a3       	std	Y+36, r25	; 0x24
    152e:	ad a3       	std	Y+37, r26	; 0x25
    1530:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1532:	6b a1       	ldd	r22, Y+35	; 0x23
    1534:	7c a1       	ldd	r23, Y+36	; 0x24
    1536:	8d a1       	ldd	r24, Y+37	; 0x25
    1538:	9e a1       	ldd	r25, Y+38	; 0x26
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e8       	ldi	r20, 0x80	; 128
    1540:	5f e3       	ldi	r21, 0x3F	; 63
    1542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1546:	88 23       	and	r24, r24
    1548:	2c f4       	brge	.+10     	; 0x1554 <LCD_displayCharacter+0x176>
		__ticks = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9a a3       	std	Y+34, r25	; 0x22
    1550:	89 a3       	std	Y+33, r24	; 0x21
    1552:	3f c0       	rjmp	.+126    	; 0x15d2 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1554:	6b a1       	ldd	r22, Y+35	; 0x23
    1556:	7c a1       	ldd	r23, Y+36	; 0x24
    1558:	8d a1       	ldd	r24, Y+37	; 0x25
    155a:	9e a1       	ldd	r25, Y+38	; 0x26
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	3f ef       	ldi	r19, 0xFF	; 255
    1560:	4f e7       	ldi	r20, 0x7F	; 127
    1562:	57 e4       	ldi	r21, 0x47	; 71
    1564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1568:	18 16       	cp	r1, r24
    156a:	4c f5       	brge	.+82     	; 0x15be <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156c:	6f a1       	ldd	r22, Y+39	; 0x27
    156e:	78 a5       	ldd	r23, Y+40	; 0x28
    1570:	89 a5       	ldd	r24, Y+41	; 0x29
    1572:	9a a5       	ldd	r25, Y+42	; 0x2a
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e2       	ldi	r20, 0x20	; 32
    157a:	51 e4       	ldi	r21, 0x41	; 65
    157c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9a a3       	std	Y+34, r25	; 0x22
    1592:	89 a3       	std	Y+33, r24	; 0x21
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <LCD_displayCharacter+0x1d6>
    1596:	89 e1       	ldi	r24, 0x19	; 25
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	98 a3       	std	Y+32, r25	; 0x20
    159c:	8f 8f       	std	Y+31, r24	; 0x1f
    159e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15a0:	98 a1       	ldd	r25, Y+32	; 0x20
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <LCD_displayCharacter+0x1c4>
    15a6:	98 a3       	std	Y+32, r25	; 0x20
    15a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15aa:	89 a1       	ldd	r24, Y+33	; 0x21
    15ac:	9a a1       	ldd	r25, Y+34	; 0x22
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	9a a3       	std	Y+34, r25	; 0x22
    15b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b4:	89 a1       	ldd	r24, Y+33	; 0x21
    15b6:	9a a1       	ldd	r25, Y+34	; 0x22
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	69 f7       	brne	.-38     	; 0x1596 <LCD_displayCharacter+0x1b8>
    15bc:	14 c0       	rjmp	.+40     	; 0x15e6 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15be:	6b a1       	ldd	r22, Y+35	; 0x23
    15c0:	7c a1       	ldd	r23, Y+36	; 0x24
    15c2:	8d a1       	ldd	r24, Y+37	; 0x25
    15c4:	9e a1       	ldd	r25, Y+38	; 0x26
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9a a3       	std	Y+34, r25	; 0x22
    15d0:	89 a3       	std	Y+33, r24	; 0x21
    15d2:	89 a1       	ldd	r24, Y+33	; 0x21
    15d4:	9a a1       	ldd	r25, Y+34	; 0x22
    15d6:	9e 8f       	std	Y+30, r25	; 0x1e
    15d8:	8d 8f       	std	Y+29, r24	; 0x1d
    15da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <LCD_displayCharacter+0x200>
    15e2:	9e 8f       	std	Y+30, r25	; 0x1e
    15e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    15e6:	eb e3       	ldi	r30, 0x3B	; 59
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	89 ad       	ldd	r24, Y+57	; 0x39
    15ec:	80 83       	st	Z, r24
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 e8       	ldi	r26, 0x80	; 128
    15f4:	bf e3       	ldi	r27, 0x3F	; 63
    15f6:	89 8f       	std	Y+25, r24	; 0x19
    15f8:	9a 8f       	std	Y+26, r25	; 0x1a
    15fa:	ab 8f       	std	Y+27, r26	; 0x1b
    15fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a e7       	ldi	r20, 0x7A	; 122
    160c:	53 e4       	ldi	r21, 0x43	; 67
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	8d 8b       	std	Y+21, r24	; 0x15
    1618:	9e 8b       	std	Y+22, r25	; 0x16
    161a:	af 8b       	std	Y+23, r26	; 0x17
    161c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    161e:	6d 89       	ldd	r22, Y+21	; 0x15
    1620:	7e 89       	ldd	r23, Y+22	; 0x16
    1622:	8f 89       	ldd	r24, Y+23	; 0x17
    1624:	98 8d       	ldd	r25, Y+24	; 0x18
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9c 8b       	std	Y+20, r25	; 0x14
    163c:	8b 8b       	std	Y+19, r24	; 0x13
    163e:	3f c0       	rjmp	.+126    	; 0x16be <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1640:	6d 89       	ldd	r22, Y+21	; 0x15
    1642:	7e 89       	ldd	r23, Y+22	; 0x16
    1644:	8f 89       	ldd	r24, Y+23	; 0x17
    1646:	98 8d       	ldd	r25, Y+24	; 0x18
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	69 8d       	ldd	r22, Y+25	; 0x19
    165a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    165c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    165e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9c 8b       	std	Y+20, r25	; 0x14
    167e:	8b 8b       	std	Y+19, r24	; 0x13
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <LCD_displayCharacter+0x2c2>
    1682:	89 e1       	ldi	r24, 0x19	; 25
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9a 8b       	std	Y+18, r25	; 0x12
    1688:	89 8b       	std	Y+17, r24	; 0x11
    168a:	89 89       	ldd	r24, Y+17	; 0x11
    168c:	9a 89       	ldd	r25, Y+18	; 0x12
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <LCD_displayCharacter+0x2b0>
    1692:	9a 8b       	std	Y+18, r25	; 0x12
    1694:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1696:	8b 89       	ldd	r24, Y+19	; 0x13
    1698:	9c 89       	ldd	r25, Y+20	; 0x14
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	9c 8b       	std	Y+20, r25	; 0x14
    169e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	8b 89       	ldd	r24, Y+19	; 0x13
    16a2:	9c 89       	ldd	r25, Y+20	; 0x14
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <LCD_displayCharacter+0x2a4>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	6d 89       	ldd	r22, Y+21	; 0x15
    16ac:	7e 89       	ldd	r23, Y+22	; 0x16
    16ae:	8f 89       	ldd	r24, Y+23	; 0x17
    16b0:	98 8d       	ldd	r25, Y+24	; 0x18
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9c 8b       	std	Y+20, r25	; 0x14
    16bc:	8b 8b       	std	Y+19, r24	; 0x13
    16be:	8b 89       	ldd	r24, Y+19	; 0x13
    16c0:	9c 89       	ldd	r25, Y+20	; 0x14
    16c2:	98 8b       	std	Y+16, r25	; 0x10
    16c4:	8f 87       	std	Y+15, r24	; 0x0f
    16c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c8:	98 89       	ldd	r25, Y+16	; 0x10
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <LCD_displayCharacter+0x2ec>
    16ce:	98 8b       	std	Y+16, r25	; 0x10
    16d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    16d2:	a8 e3       	ldi	r26, 0x38	; 56
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e8 e3       	ldi	r30, 0x38	; 56
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8b 7f       	andi	r24, 0xFB	; 251
    16de:	8c 93       	st	X, r24
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a0 e8       	ldi	r26, 0x80	; 128
    16e6:	bf e3       	ldi	r27, 0x3F	; 63
    16e8:	8b 87       	std	Y+11, r24	; 0x0b
    16ea:	9c 87       	std	Y+12, r25	; 0x0c
    16ec:	ad 87       	std	Y+13, r26	; 0x0d
    16ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a e7       	ldi	r20, 0x7A	; 122
    16fe:	53 e4       	ldi	r21, 0x43	; 67
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	8f 83       	std	Y+7, r24	; 0x07
    170a:	98 87       	std	Y+8, r25	; 0x08
    170c:	a9 87       	std	Y+9, r26	; 0x09
    170e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1710:	6f 81       	ldd	r22, Y+7	; 0x07
    1712:	78 85       	ldd	r23, Y+8	; 0x08
    1714:	89 85       	ldd	r24, Y+9	; 0x09
    1716:	9a 85       	ldd	r25, Y+10	; 0x0a
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e8       	ldi	r20, 0x80	; 128
    171e:	5f e3       	ldi	r21, 0x3F	; 63
    1720:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1724:	88 23       	and	r24, r24
    1726:	2c f4       	brge	.+10     	; 0x1732 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	3f c0       	rjmp	.+126    	; 0x17b0 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	3f ef       	ldi	r19, 0xFF	; 255
    173e:	4f e7       	ldi	r20, 0x7F	; 127
    1740:	57 e4       	ldi	r21, 0x47	; 71
    1742:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1746:	18 16       	cp	r1, r24
    1748:	4c f5       	brge	.+82     	; 0x179c <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174a:	6b 85       	ldd	r22, Y+11	; 0x0b
    174c:	7c 85       	ldd	r23, Y+12	; 0x0c
    174e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1750:	9e 85       	ldd	r25, Y+14	; 0x0e
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e2       	ldi	r20, 0x20	; 32
    1758:	51 e4       	ldi	r21, 0x41	; 65
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	0f c0       	rjmp	.+30     	; 0x1792 <LCD_displayCharacter+0x3b4>
    1774:	89 e1       	ldi	r24, 0x19	; 25
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9c 83       	std	Y+4, r25	; 0x04
    177a:	8b 83       	std	Y+3, r24	; 0x03
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <LCD_displayCharacter+0x3a2>
    1784:	9c 83       	std	Y+4, r25	; 0x04
    1786:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	9e 81       	ldd	r25, Y+6	; 0x06
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	69 f7       	brne	.-38     	; 0x1774 <LCD_displayCharacter+0x396>
    179a:	14 c0       	rjmp	.+40     	; 0x17c4 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179c:	6f 81       	ldd	r22, Y+7	; 0x07
    179e:	78 85       	ldd	r23, Y+8	; 0x08
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9e 83       	std	Y+6, r25	; 0x06
    17ae:	8d 83       	std	Y+5, r24	; 0x05
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
    17b2:	9e 81       	ldd	r25, Y+6	; 0x06
    17b4:	9a 83       	std	Y+2, r25	; 0x02
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <LCD_displayCharacter+0x3de>
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    17c4:	e9 96       	adiw	r28, 0x39	; 57
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	00 d0       	rcall	.+0      	; 0x17dc <LCD_displayString+0x6>
    17dc:	0f 92       	push	r0
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	9b 83       	std	Y+3, r25	; 0x03
    17e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    17e6:	19 82       	std	Y+1, r1	; 0x01
    17e8:	0e c0       	rjmp	.+28     	; 0x1806 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	9b 81       	ldd	r25, Y+3	; 0x03
    17f4:	fc 01       	movw	r30, r24
    17f6:	e2 0f       	add	r30, r18
    17f8:	f3 1f       	adc	r31, r19
    17fa:	80 81       	ld	r24, Z
    17fc:	0e 94 ef 09 	call	0x13de	; 0x13de <LCD_displayCharacter>
		i++;
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	8f 5f       	subi	r24, 0xFF	; 255
    1804:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	fc 01       	movw	r30, r24
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	80 81       	ld	r24, Z
    1818:	88 23       	and	r24, r24
    181a:	39 f7       	brne	.-50     	; 0x17ea <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <LCD_goToRowColumn+0x6>
    182e:	00 d0       	rcall	.+0      	; 0x1830 <LCD_goToRowColumn+0x8>
    1830:	0f 92       	push	r0
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	8a 83       	std	Y+2, r24	; 0x02
    1838:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	3d 83       	std	Y+5, r19	; 0x05
    1842:	2c 83       	std	Y+4, r18	; 0x04
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	c1 f0       	breq	.+48     	; 0x187e <LCD_goToRowColumn+0x56>
    184e:	2c 81       	ldd	r18, Y+4	; 0x04
    1850:	3d 81       	ldd	r19, Y+5	; 0x05
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	2c f4       	brge	.+10     	; 0x1862 <LCD_goToRowColumn+0x3a>
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	61 f0       	breq	.+24     	; 0x1878 <LCD_goToRowColumn+0x50>
    1860:	19 c0       	rjmp	.+50     	; 0x1894 <LCD_goToRowColumn+0x6c>
    1862:	2c 81       	ldd	r18, Y+4	; 0x04
    1864:	3d 81       	ldd	r19, Y+5	; 0x05
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	69 f0       	breq	.+26     	; 0x1886 <LCD_goToRowColumn+0x5e>
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	9d 81       	ldd	r25, Y+5	; 0x05
    1870:	83 30       	cpi	r24, 0x03	; 3
    1872:	91 05       	cpc	r25, r1
    1874:	61 f0       	breq	.+24     	; 0x188e <LCD_goToRowColumn+0x66>
    1876:	0e c0       	rjmp	.+28     	; 0x1894 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	0b c0       	rjmp	.+22     	; 0x1894 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	80 5c       	subi	r24, 0xC0	; 192
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	07 c0       	rjmp	.+14     	; 0x1894 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	80 5f       	subi	r24, 0xF0	; 240
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	80 5b       	subi	r24, 0xB0	; 176
    1892:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	80 68       	ori	r24, 0x80	; 128
    1898:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LCD_sendCommand>
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <LCD_displayStringRowColumn+0x6>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <LCD_displayStringRowColumn+0x8>
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	6a 83       	std	Y+2, r22	; 0x02
    18bc:	5c 83       	std	Y+4, r21	; 0x04
    18be:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	6a 81       	ldd	r22, Y+2	; 0x02
    18c4:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_displayString>
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	62 97       	sbiw	r28, 0x12	; 18
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	9a 8b       	std	Y+18, r25	; 0x12
    18f4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    18f6:	89 89       	ldd	r24, Y+17	; 0x11
    18f8:	9a 89       	ldd	r25, Y+18	; 0x12
    18fa:	9e 01       	movw	r18, r28
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	b9 01       	movw	r22, r18
    1902:	4a e0       	ldi	r20, 0x0A	; 10
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	0e 94 5f 13 	call	0x26be	; 0x26be <itoa>
   LCD_displayString(buff);
    190a:	ce 01       	movw	r24, r28
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_displayString>
}
    1912:	62 96       	adiw	r28, 0x12	; 18
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <LCD_sendCommand>
}
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <main>:
void turnOnBuzzer(); /* prototype of function that turn on buzzer because the password is entered wrong 3 times */
void usingCheck();
void setFirstUsed();
void turnOffBuzzer();
void main()
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	65 97       	sbiw	r28, 0x15	; 21
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61

	DDRD|=(1<<7); /* make buzzer pin as output */
    194c:	a1 e3       	ldi	r26, 0x31	; 49
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e1 e3       	ldi	r30, 0x31	; 49
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	80 68       	ori	r24, 0x80	; 128
    1958:	8c 93       	st	X, r24
	DDRB =0XFF; /* lcd data pins as output to test the data*/
    195a:	e7 e3       	ldi	r30, 0x37	; 55
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8f ef       	ldi	r24, 0xFF	; 255
    1960:	80 83       	st	Z, r24

	uint8 msg; uint8 passwordCode1[6];
	drivers_init();
    1962:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <drivers_init>
	LCD_displayString(" welcome to our ");
    1966:	80 e6       	ldi	r24, 0x60	; 96
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_displayString>
	LCD_goToRowColumn(1,3);
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	63 e0       	ldi	r22, 0x03	; 3
    1972:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_goToRowColumn>
	LCD_displayString("system");
    1976:	81 e7       	ldi	r24, 0x71	; 113
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_displayString>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a6 e9       	ldi	r26, 0x96	; 150
    1984:	b3 e4       	ldi	r27, 0x43	; 67
    1986:	8b 87       	std	Y+11, r24	; 0x0b
    1988:	9c 87       	std	Y+12, r25	; 0x0c
    198a:	ad 87       	std	Y+13, r26	; 0x0d
    198c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1990:	7c 85       	ldd	r23, Y+12	; 0x0c
    1992:	8d 85       	ldd	r24, Y+13	; 0x0d
    1994:	9e 85       	ldd	r25, Y+14	; 0x0e
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	53 e4       	ldi	r21, 0x43	; 67
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8f 83       	std	Y+7, r24	; 0x07
    19a8:	98 87       	std	Y+8, r25	; 0x08
    19aa:	a9 87       	std	Y+9, r26	; 0x09
    19ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ae:	6f 81       	ldd	r22, Y+7	; 0x07
    19b0:	78 85       	ldd	r23, Y+8	; 0x08
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <main+0x98>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9e 83       	std	Y+6, r25	; 0x06
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <main+0x116>
	else if (__tmp > 65535)
    19d0:	6f 81       	ldd	r22, Y+7	; 0x07
    19d2:	78 85       	ldd	r23, Y+8	; 0x08
    19d4:	89 85       	ldd	r24, Y+9	; 0x09
    19d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <main+0xf8>
    1a12:	89 e1       	ldi	r24, 0x19	; 25
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9c 83       	std	Y+4, r25	; 0x04
    1a18:	8b 83       	std	Y+3, r24	; 0x03
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <main+0xe6>
    1a22:	9c 83       	std	Y+4, r25	; 0x04
    1a24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	9e 83       	std	Y+6, r25	; 0x06
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	9e 81       	ldd	r25, Y+6	; 0x06
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <main+0xda>
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3c:	78 85       	ldd	r23, Y+8	; 0x08
    1a3e:	89 85       	ldd	r24, Y+9	; 0x09
    1a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
    1a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a50:	9e 81       	ldd	r25, Y+6	; 0x06
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <main+0x122>
    1a5e:	9a 83       	std	Y+2, r25	; 0x02
    1a60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LCD_clearScreen();
    1a62:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_clearScreen>
	while(1)
	{
		msg = USART_recieveByte(); /* receive message from MC1 to take actions according to it */
    1a66:	0e 94 b9 12 	call	0x2572	; 0x2572 <USART_recieveByte>
    1a6a:	8f 87       	std	Y+15, r24	; 0x0f
		UART_msgIdentify(msg); /* call function contain message that MC1 transmit it to MC2  by uart to make MC2 take actions according to it */
    1a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6e:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <UART_msgIdentify>
    1a72:	f9 cf       	rjmp	.-14     	; 0x1a66 <main+0x12e>

00001a74 <drivers_init>:
	}
}

/* Initialization of drivers "UART , LCD , External eeprom "*/
void drivers_init()
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <drivers_init+0x6>
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <drivers_init+0x8>
    1a7c:	0f 92       	push	r0
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	/* usart set configrations */
	usart_configType UART_configration;
	UART_configration.modeSelect=Asynchronous;
    1a82:	1d 82       	std	Y+5, r1	; 0x05
	UART_configration.numOfBits =bit_8;
    1a84:	83 e0       	ldi	r24, 0x03	; 3
    1a86:	89 83       	std	Y+1, r24	; 0x01
	UART_configration.numOfstopBit= stop_1bit;
    1a88:	1b 82       	std	Y+3, r1	; 0x03
	UART_configration.parityBit= No_Parity;
    1a8a:	1a 82       	std	Y+2, r1	; 0x02
	UART_configration.RX_or_TX=Both_transmition_and_receiver;
    1a8c:	83 e0       	ldi	r24, 0x03	; 3
    1a8e:	8c 83       	std	Y+4, r24	; 0x04
	USART_init(&UART_configration);
    1a90:	ce 01       	movw	r24, r28
    1a92:	01 96       	adiw	r24, 0x01	; 1
    1a94:	0e 94 3a 12 	call	0x2474	; 0x2474 <USART_init>

	LCD_init();
    1a98:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <LCD_init>
	EEPROM_init();
    1a9c:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_init>
}
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <receivePassword>:

/* function that receive the password and write it in EEPROM  */
void receivePassword()
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	2e 97       	sbiw	r28, 0x0e	; 14
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61

	uint8 passwordCode1[6]   , passwordCode2[6], check;

	USART_receiveString(passwordCode1);
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	03 96       	adiw	r24, 0x03	; 3
    1ac8:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <USART_receiveString>

	check = EEPROM_writeString(PASSWORD_LOCATION ,passwordCode1);
    1acc:	9e 01       	movw	r18, r28
    1ace:	2d 5f       	subi	r18, 0xFD	; 253
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad2:	80 e2       	ldi	r24, 0x20	; 32
    1ad4:	93 e0       	ldi	r25, 0x03	; 3
    1ad6:	b9 01       	movw	r22, r18
    1ad8:	0e 94 50 06 	call	0xca0	; 0xca0 <EEPROM_writeString>
    1adc:	8a 83       	std	Y+2, r24	; 0x02
	//EEPROM_writeByte(0X333,0X03);

	if (check == SUCCESS)
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	d9 f4       	brne	.+54     	; 0x1b1a <receivePassword+0x6a>
	{
		uint8 check2 = EEPROM_readString(PASSWORD_LOCATION ,passwordCode2 , 5 );
    1ae4:	9e 01       	movw	r18, r28
    1ae6:	27 5f       	subi	r18, 0xF7	; 247
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	80 e2       	ldi	r24, 0x20	; 32
    1aec:	93 e0       	ldi	r25, 0x03	; 3
    1aee:	b9 01       	movw	r22, r18
    1af0:	45 e0       	ldi	r20, 0x05	; 5
    1af2:	0e 94 07 07 	call	0xe0e	; 0xe0e <EEPROM_readString>
    1af6:	89 83       	std	Y+1, r24	; 0x01
		//EEPROM_readByte(0X333,0X03);
		if (check2 == SUCCESS)
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	71 f4       	brne	.+28     	; 0x1b1a <receivePassword+0x6a>
		{
			LCD_displayString("pass = ");
    1afe:	88 e7       	ldi	r24, 0x78	; 120
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_goToRowColumn>
			LCD_clearScreen();
    1b0e:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_clearScreen>
			LCD_displayString(passwordCode2);
    1b12:	ce 01       	movw	r24, r28
    1b14:	09 96       	adiw	r24, 0x09	; 9
    1b16:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_displayString>
		}
	}

}
    1b1a:	2e 96       	adiw	r28, 0x0e	; 14
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <sendOldPassword>:
/* function that send the password that saved in EEPROM to MC1 by uart */
void sendOldPassword()
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	2e 97       	sbiw	r28, 0x0e	; 14
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
	uint8 oldPassword [6] , oldPasswordPrepared [7];
	uint8 check2 = EEPROM_readString(PASSWORD_LOCATION ,oldPassword , 5 );
    1b40:	9e 01       	movw	r18, r28
    1b42:	2e 5f       	subi	r18, 0xFE	; 254
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	80 e2       	ldi	r24, 0x20	; 32
    1b48:	93 e0       	ldi	r25, 0x03	; 3
    1b4a:	b9 01       	movw	r22, r18
    1b4c:	45 e0       	ldi	r20, 0x05	; 5
    1b4e:	0e 94 07 07 	call	0xe0e	; 0xe0e <EEPROM_readString>
    1b52:	89 83       	std	Y+1, r24	; 0x01
	if (check2 == SUCCESS)
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	71 f4       	brne	.+28     	; 0x1b76 <sendOldPassword+0x4a>
	{
		LCD_displayString("pass = ");
    1b5a:	88 e7       	ldi	r24, 0x78	; 120
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_goToRowColumn>
		LCD_clearScreen();
    1b6a:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_clearScreen>
		LCD_displayString(oldPassword);
    1b6e:	ce 01       	movw	r24, r28
    1b70:	02 96       	adiw	r24, 0x02	; 2
    1b72:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_displayString>
	}
	prepareToSend(oldPassword, oldPasswordPrepared);
    1b76:	ce 01       	movw	r24, r28
    1b78:	02 96       	adiw	r24, 0x02	; 2
    1b7a:	9e 01       	movw	r18, r28
    1b7c:	28 5f       	subi	r18, 0xF8	; 248
    1b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b80:	b9 01       	movw	r22, r18
    1b82:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <prepareToSend>
	USART_sendString(oldPasswordPrepared);
    1b86:	ce 01       	movw	r24, r28
    1b88:	08 96       	adiw	r24, 0x08	; 8
    1b8a:	0e 94 c8 12 	call	0x2590	; 0x2590 <USART_sendString>
	//USART_sendByte(0X03);
}
    1b8e:	2e 96       	adiw	r28, 0x0e	; 14
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <UART_msgIdentify>:

/* identify the messages that MC1 transmit it to MC2  by uart to make MC2 take actions according to it */
void UART_msgIdentify(uint8 msg)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <UART_msgIdentify+0x6>
    1ba6:	0f 92       	push	r0
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	89 83       	std	Y+1, r24	; 0x01
	//PORTA|=(1<<PA3);
	switch (msg)
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	3b 83       	std	Y+3, r19	; 0x03
    1bb6:	2a 83       	std	Y+2, r18	; 0x02
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbc:	8c 30       	cpi	r24, 0x0C	; 12
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	71 f1       	breq	.+92     	; 0x1c1e <UART_msgIdentify+0x7e>
    1bc2:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc4:	3b 81       	ldd	r19, Y+3	; 0x03
    1bc6:	2d 30       	cpi	r18, 0x0D	; 13
    1bc8:	31 05       	cpc	r19, r1
    1bca:	84 f4       	brge	.+32     	; 0x1bec <UART_msgIdentify+0x4c>
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	69 f1       	breq	.+90     	; 0x1c30 <UART_msgIdentify+0x90>
    1bd6:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd8:	3b 81       	ldd	r19, Y+3	; 0x03
    1bda:	2b 30       	cpi	r18, 0x0B	; 11
    1bdc:	31 05       	cpc	r19, r1
    1bde:	b1 f0       	breq	.+44     	; 0x1c0c <UART_msgIdentify+0x6c>
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	9b 81       	ldd	r25, Y+3	; 0x03
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	91 05       	cpc	r25, r1
    1be8:	01 f1       	breq	.+64     	; 0x1c2a <UART_msgIdentify+0x8a>
    1bea:	24 c0       	rjmp	.+72     	; 0x1c34 <UART_msgIdentify+0x94>
    1bec:	2a 81       	ldd	r18, Y+2	; 0x02
    1bee:	3b 81       	ldd	r19, Y+3	; 0x03
    1bf0:	2e 30       	cpi	r18, 0x0E	; 14
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	89 f0       	breq	.+34     	; 0x1c18 <UART_msgIdentify+0x78>
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfa:	8e 30       	cpi	r24, 0x0E	; 14
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	4c f0       	brlt	.+18     	; 0x1c12 <UART_msgIdentify+0x72>
    1c00:	2a 81       	ldd	r18, Y+2	; 0x02
    1c02:	3b 81       	ldd	r19, Y+3	; 0x03
    1c04:	2f 30       	cpi	r18, 0x0F	; 15
    1c06:	31 05       	cpc	r19, r1
    1c08:	69 f0       	breq	.+26     	; 0x1c24 <UART_msgIdentify+0x84>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <UART_msgIdentify+0x94>
	{
		case SAVE_PASS : receivePassword(); break;
    1c0c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <receivePassword>
    1c10:	11 c0       	rjmp	.+34     	; 0x1c34 <UART_msgIdentify+0x94>
		case OPEN_DOOR_REQ :sendOldPassword(); break;
    1c12:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <sendOldPassword>
    1c16:	0e c0       	rjmp	.+28     	; 0x1c34 <UART_msgIdentify+0x94>
		case OPEN_DOOR :prepareMotorPlusTimer(); break;
    1c18:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <prepareMotorPlusTimer>
    1c1c:	0b c0       	rjmp	.+22     	; 0x1c34 <UART_msgIdentify+0x94>
		case CHANGE_PASSWORD: sendOldPassword(); break;
    1c1e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <sendOldPassword>
    1c22:	08 c0       	rjmp	.+16     	; 0x1c34 <UART_msgIdentify+0x94>
		case WRONG_PASSWORD:turnOnBuzzer(); break;
    1c24:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <turnOnBuzzer>
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <UART_msgIdentify+0x94>
		case FIRST_USE_CHECK :usingCheck(); break;
    1c2a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <usingCheck>
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <UART_msgIdentify+0x94>
		case SET_FIRST_USE: setFirstUsed(); break;
    1c30:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <setFirstUsed>
	}
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <prepareToSend>:
/* function to add # to the new password in the buffer that is save in to prepare send it by uart to MC1 */
void prepareToSend(uint8 array[], uint8 array2[])
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <prepareToSend+0x6>
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <prepareToSend+0x8>
    1c48:	0f 92       	push	r0
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	9b 83       	std	Y+3, r25	; 0x03
    1c50:	8a 83       	std	Y+2, r24	; 0x02
    1c52:	7d 83       	std	Y+5, r23	; 0x05
    1c54:	6c 83       	std	Y+4, r22	; 0x04
	sint8 i = 0;
    1c56:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 6; i++)
    1c58:	19 82       	std	Y+1, r1	; 0x01
    1c5a:	28 c0       	rjmp	.+80     	; 0x1cac <prepareToSend+0x6c>
	{
		array2[i] = array[i];
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	28 2f       	mov	r18, r24
    1c60:	33 27       	eor	r19, r19
    1c62:	27 fd       	sbrc	r18, 7
    1c64:	30 95       	com	r19
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	a2 0f       	add	r26, r18
    1c6e:	b3 1f       	adc	r27, r19
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	28 2f       	mov	r18, r24
    1c74:	33 27       	eor	r19, r19
    1c76:	27 fd       	sbrc	r18, 7
    1c78:	30 95       	com	r19
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	fc 01       	movw	r30, r24
    1c80:	e2 0f       	add	r30, r18
    1c82:	f3 1f       	adc	r31, r19
    1c84:	80 81       	ld	r24, Z
    1c86:	8c 93       	st	X, r24
		if (i == 5)
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	85 30       	cpi	r24, 0x05	; 5
    1c8c:	61 f4       	brne	.+24     	; 0x1ca6 <prepareToSend+0x66>
		{
			array2[i] = '#';
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	28 2f       	mov	r18, r24
    1c92:	33 27       	eor	r19, r19
    1c94:	27 fd       	sbrc	r18, 7
    1c96:	30 95       	com	r19
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	e2 0f       	add	r30, r18
    1ca0:	f3 1f       	adc	r31, r19
    1ca2:	83 e2       	ldi	r24, 0x23	; 35
    1ca4:	80 83       	st	Z, r24
}
/* function to add # to the new password in the buffer that is save in to prepare send it by uart to MC1 */
void prepareToSend(uint8 array[], uint8 array2[])
{
	sint8 i = 0;
	for (i = 0; i < 6; i++)
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	8f 5f       	subi	r24, 0xFF	; 255
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	86 30       	cpi	r24, 0x06	; 6
    1cb0:	ac f2       	brlt	.-86     	; 0x1c5c <prepareToSend+0x1c>
		{
			array2[i] = '#';
			//break;
		}
	}
	array2[i] ='\0';
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	33 27       	eor	r19, r19
    1cb8:	27 fd       	sbrc	r18, 7
    1cba:	30 95       	com	r19
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	e2 0f       	add	r30, r18
    1cc4:	f3 1f       	adc	r31, r19
    1cc6:	10 82       	st	Z, r1
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <rotateMotor>:

/* this fuction is called by ISR "call back"
 * it open the door for 15s by rotate motor clock wise then close the door after 15s by rotate motor anti clock wise then stop */
void rotateMotor()
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
	counter ++;
    1ce0:	80 91 9e 00 	lds	r24, 0x009E
    1ce4:	8f 5f       	subi	r24, 0xFF	; 255
    1ce6:	80 93 9e 00 	sts	0x009E, r24
	if (counter ==15)
    1cea:	80 91 9e 00 	lds	r24, 0x009E
    1cee:	8f 30       	cpi	r24, 0x0F	; 15
    1cf0:	a9 f4       	brne	.+42     	; 0x1d1c <rotateMotor+0x44>
	{
		/* unti clock wise */
		PORTC |= (1<<PC6);
    1cf2:	a5 e3       	ldi	r26, 0x35	; 53
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e5 e3       	ldi	r30, 0x35	; 53
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	80 64       	ori	r24, 0x40	; 64
    1cfe:	8c 93       	st	X, r24
		PORTC &=~(1<<PC7);
    1d00:	a5 e3       	ldi	r26, 0x35	; 53
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e3       	ldi	r30, 0x35	; 53
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8f 77       	andi	r24, 0x7F	; 127
    1d0c:	8c 93       	st	X, r24
		LCD_displayString("anti clockwise ");
    1d0e:	80 e8       	ldi	r24, 0x80	; 128
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_displayString>
		LCD_clearScreen();
    1d16:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_clearScreen>
    1d1a:	16 c0       	rjmp	.+44     	; 0x1d48 <rotateMotor+0x70>
	}
	else if (counter == 30)
    1d1c:	80 91 9e 00 	lds	r24, 0x009E
    1d20:	8e 31       	cpi	r24, 0x1E	; 30
    1d22:	91 f4       	brne	.+36     	; 0x1d48 <rotateMotor+0x70>
	{
		/*  stop motor */
		PORTC &= ~(1<<PC7);
    1d24:	a5 e3       	ldi	r26, 0x35	; 53
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e5 e3       	ldi	r30, 0x35	; 53
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8f 77       	andi	r24, 0x7F	; 127
    1d30:	8c 93       	st	X, r24
		PORTC &=~(1<<PC6);
    1d32:	a5 e3       	ldi	r26, 0x35	; 53
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e5 e3       	ldi	r30, 0x35	; 53
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8f 7b       	andi	r24, 0xBF	; 191
    1d3e:	8c 93       	st	X, r24
		LCD_displayString("stop");
    1d40:	80 e9       	ldi	r24, 0x90	; 144
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_displayString>
		//TIMER1_stop();
	}
}
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <prepareMotorPlusTimer>:
/* prepare timer and motor and set its configuration */
void prepareMotorPlusTimer()
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	28 97       	sbiw	r28, 0x08	; 8
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
	/* prepare Motor */
	DDRC|=(1<<PC6)|(1<<PC7);
    1d62:	a4 e3       	ldi	r26, 0x34	; 52
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e4 e3       	ldi	r30, 0x34	; 52
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	80 6c       	ori	r24, 0xC0	; 192
    1d6e:	8c 93       	st	X, r24
	/* rotate motor clock wise */
	PORTC |= (1<<PC7);
    1d70:	a5 e3       	ldi	r26, 0x35	; 53
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e5 e3       	ldi	r30, 0x35	; 53
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 68       	ori	r24, 0x80	; 128
    1d7c:	8c 93       	st	X, r24
	PORTC &=~(1<<PC6);
    1d7e:	a5 e3       	ldi	r26, 0x35	; 53
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 e3       	ldi	r30, 0x35	; 53
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8f 7b       	andi	r24, 0xBF	; 191
    1d8a:	8c 93       	st	X, r24

	/* prepare time */
	TIMER_config config; // set timer configrations
	config.channel= timer1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	config.waveMode.TIMER1_waveMode= TIMER1_CTC_OCR1A;
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	8b 83       	std	Y+3, r24	; 0x03
	config.clock.Timer_0_1_clock = TIMER_0_1_FCPU_64;
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	8c 83       	std	Y+4, r24	; 0x04
	config.initalValue =0;
    1d98:	1e 82       	std	Y+6, r1	; 0x06
    1d9a:	1d 82       	std	Y+5, r1	; 0x05
	config.finalValue = 15624;
    1d9c:	88 e0       	ldi	r24, 0x08	; 8
    1d9e:	9d e3       	ldi	r25, 0x3D	; 61
    1da0:	98 87       	std	Y+8, r25	; 0x08
    1da2:	8f 83       	std	Y+7, r24	; 0x07
	config.compOut=0;
    1da4:	1a 82       	std	Y+2, r1	; 0x02
	SREG |=(1<<7); // I BIT Enable
    1da6:	af e5       	ldi	r26, 0x5F	; 95
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ef e5       	ldi	r30, 0x5F	; 95
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	80 68       	ori	r24, 0x80	; 128
    1db2:	8c 93       	st	X, r24
	TIMER_init(&config);
    1db4:	ce 01       	movw	r24, r28
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	0e 94 8d 10 	call	0x211a	; 0x211a <TIMER_init>
	Timer1_setCallBack(rotateMotor);
    1dbc:	8c e6       	ldi	r24, 0x6C	; 108
    1dbe:	9e e0       	ldi	r25, 0x0E	; 14
    1dc0:	0e 94 16 12 	call	0x242c	; 0x242c <Timer1_setCallBack>

}
    1dc4:	28 96       	adiw	r28, 0x08	; 8
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <turnOnBuzzer>:

/*function that turn on buzzer for 1 min by using timer 1 because the password is entered wrong 3 times */
void turnOnBuzzer()
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	28 97       	sbiw	r28, 0x08	; 8
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
	PORTD|=(1<<7);
    1dea:	a2 e3       	ldi	r26, 0x32	; 50
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e2 e3       	ldi	r30, 0x32	; 50
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	80 68       	ori	r24, 0x80	; 128
    1df6:	8c 93       	st	X, r24

	/* prepare time */
	TIMER_config config; // set timer configrations
	config.channel= timer1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	89 83       	std	Y+1, r24	; 0x01
	config.waveMode.TIMER1_waveMode= TIMER1_CTC_OCR1A;
    1dfc:	84 e0       	ldi	r24, 0x04	; 4
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
	config.clock.Timer_0_1_clock = TIMER_0_1_FCPU_64;
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	8c 83       	std	Y+4, r24	; 0x04
	config.initalValue =0;
    1e04:	1e 82       	std	Y+6, r1	; 0x06
    1e06:	1d 82       	std	Y+5, r1	; 0x05
	config.finalValue = 15624;
    1e08:	88 e0       	ldi	r24, 0x08	; 8
    1e0a:	9d e3       	ldi	r25, 0x3D	; 61
    1e0c:	98 87       	std	Y+8, r25	; 0x08
    1e0e:	8f 83       	std	Y+7, r24	; 0x07
	config.compOut=0;
    1e10:	1a 82       	std	Y+2, r1	; 0x02
	SREG |=(1<<7); // I BIT Enable
    1e12:	af e5       	ldi	r26, 0x5F	; 95
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	ef e5       	ldi	r30, 0x5F	; 95
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 68       	ori	r24, 0x80	; 128
    1e1e:	8c 93       	st	X, r24
	TIMER_init(&config);
    1e20:	ce 01       	movw	r24, r28
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	0e 94 8d 10 	call	0x211a	; 0x211a <TIMER_init>
	Timer1_setCallBack(turnOffBuzzer);
    1e28:	81 e2       	ldi	r24, 0x21	; 33
    1e2a:	9f e0       	ldi	r25, 0x0F	; 15
    1e2c:	0e 94 16 12 	call	0x242c	; 0x242c <Timer1_setCallBack>
   /* ************* Another Method **************
		for (int i=0;i<12 ;i++)
		_delay_ms(60000); // delay for 1 min util buzzer finish
		PORTD&=~(1<<7);
	 ************************************************/
}
    1e30:	28 96       	adiw	r28, 0x08	; 8
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <turnOffBuzzer>:

/* this fuction is called by ISR "call back"
 * it turn off motor */
void turnOffBuzzer()
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
	tick ++;
    1e4a:	80 91 a5 00 	lds	r24, 0x00A5
    1e4e:	8f 5f       	subi	r24, 0xFF	; 255
    1e50:	80 93 a5 00 	sts	0x00A5, r24
	if (tick == 60)
    1e54:	80 91 a5 00 	lds	r24, 0x00A5
    1e58:	8c 33       	cpi	r24, 0x3C	; 60
    1e5a:	51 f4       	brne	.+20     	; 0x1e70 <turnOffBuzzer+0x2e>
	{
		PORTD&=~(1<<7);
    1e5c:	a2 e3       	ldi	r26, 0x32	; 50
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e2 e3       	ldi	r30, 0x32	; 50
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	8f 77       	andi	r24, 0x7F	; 127
    1e68:	8c 93       	st	X, r24
		USART_sendByte( BUZZER_OFF);
    1e6a:	83 e0       	ldi	r24, 0x03	; 3
    1e6c:	0e 94 a2 12 	call	0x2544	; 0x2544 <USART_sendByte>
	}
}
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <usingCheck>:

/* this function is used every time run the system to check if the user has already use the system or not*/
void usingCheck()
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	0f 92       	push	r0
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
	uint8 val;
	EEPROM_readByte(FIRST_USED_VAL_LOCATION , &val);
    1e80:	8d e0       	ldi	r24, 0x0D	; 13
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9e 01       	movw	r18, r28
    1e86:	2f 5f       	subi	r18, 0xFF	; 255
    1e88:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8a:	b9 01       	movw	r22, r18
    1e8c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <EEPROM_readByte>
	USART_sendByte(val);
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	0e 94 a2 12 	call	0x2544	; 0x2544 <USART_sendByte>
}
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <setFirstUsed>:

/* this function is used in first time used the system when the user sign up and enter password and confirm on it
 * then the MC1 send fixed value by USART and through this function we save this value in External EEPROM
 */
void setFirstUsed()
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
	EEPROM_writeByte(FIRST_USED_VAL_LOCATION , USED_FIRST);
    1ea6:	8d e0       	ldi	r24, 0x0D	; 13
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	65 e0       	ldi	r22, 0x05	; 5
    1eac:	0e 94 af 05 	call	0xb5e	; 0xb5e <EEPROM_writeByte>
}
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <__vector_9>:
 *******************************************************************************/


/*ISR for Timer 0  Normal mode */
ISR(TIMER0_OVF_vect)
{
    1eb6:	1f 92       	push	r1
    1eb8:	0f 92       	push	r0
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	0f 92       	push	r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	2f 93       	push	r18
    1ec2:	3f 93       	push	r19
    1ec4:	4f 93       	push	r20
    1ec6:	5f 93       	push	r21
    1ec8:	6f 93       	push	r22
    1eca:	7f 93       	push	r23
    1ecc:	8f 93       	push	r24
    1ece:	9f 93       	push	r25
    1ed0:	af 93       	push	r26
    1ed2:	bf 93       	push	r27
    1ed4:	ef 93       	push	r30
    1ed6:	ff 93       	push	r31
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
   if(g_CallBackPtr0!=NULL)
    1ee0:	80 91 9f 00 	lds	r24, 0x009F
    1ee4:	90 91 a0 00 	lds	r25, 0x00A0
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	29 f0       	breq	.+10     	; 0x1ef6 <__vector_9+0x40>
      {
	   (*g_CallBackPtr0)();
    1eec:	e0 91 9f 00 	lds	r30, 0x009F
    1ef0:	f0 91 a0 00 	lds	r31, 0x00A0
    1ef4:	09 95       	icall
      }

}
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	ff 91       	pop	r31
    1efc:	ef 91       	pop	r30
    1efe:	bf 91       	pop	r27
    1f00:	af 91       	pop	r26
    1f02:	9f 91       	pop	r25
    1f04:	8f 91       	pop	r24
    1f06:	7f 91       	pop	r23
    1f08:	6f 91       	pop	r22
    1f0a:	5f 91       	pop	r21
    1f0c:	4f 91       	pop	r20
    1f0e:	3f 91       	pop	r19
    1f10:	2f 91       	pop	r18
    1f12:	0f 90       	pop	r0
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	0f 90       	pop	r0
    1f18:	1f 90       	pop	r1
    1f1a:	18 95       	reti

00001f1c <__vector_8>:

/*ISR for Timer 1  Normal mode */
ISR(TIMER1_OVF_vect)
{
    1f1c:	1f 92       	push	r1
    1f1e:	0f 92       	push	r0
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	0f 92       	push	r0
    1f24:	11 24       	eor	r1, r1
    1f26:	2f 93       	push	r18
    1f28:	3f 93       	push	r19
    1f2a:	4f 93       	push	r20
    1f2c:	5f 93       	push	r21
    1f2e:	6f 93       	push	r22
    1f30:	7f 93       	push	r23
    1f32:	8f 93       	push	r24
    1f34:	9f 93       	push	r25
    1f36:	af 93       	push	r26
    1f38:	bf 93       	push	r27
    1f3a:	ef 93       	push	r30
    1f3c:	ff 93       	push	r31
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
   if(g_CallBackPtr1!=NULL)
    1f46:	80 91 a1 00 	lds	r24, 0x00A1
    1f4a:	90 91 a2 00 	lds	r25, 0x00A2
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	29 f0       	breq	.+10     	; 0x1f5c <__vector_8+0x40>
      {
	   (*g_CallBackPtr1)();
    1f52:	e0 91 a1 00 	lds	r30, 0x00A1
    1f56:	f0 91 a2 00 	lds	r31, 0x00A2
    1f5a:	09 95       	icall
      }

}
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	ff 91       	pop	r31
    1f62:	ef 91       	pop	r30
    1f64:	bf 91       	pop	r27
    1f66:	af 91       	pop	r26
    1f68:	9f 91       	pop	r25
    1f6a:	8f 91       	pop	r24
    1f6c:	7f 91       	pop	r23
    1f6e:	6f 91       	pop	r22
    1f70:	5f 91       	pop	r21
    1f72:	4f 91       	pop	r20
    1f74:	3f 91       	pop	r19
    1f76:	2f 91       	pop	r18
    1f78:	0f 90       	pop	r0
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	0f 90       	pop	r0
    1f7e:	1f 90       	pop	r1
    1f80:	18 95       	reti

00001f82 <__vector_4>:

/*ISR for Timer 2  Normal mode */
ISR(TIMER2_OVF_vect)
{
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	2f 93       	push	r18
    1f8e:	3f 93       	push	r19
    1f90:	4f 93       	push	r20
    1f92:	5f 93       	push	r21
    1f94:	6f 93       	push	r22
    1f96:	7f 93       	push	r23
    1f98:	8f 93       	push	r24
    1f9a:	9f 93       	push	r25
    1f9c:	af 93       	push	r26
    1f9e:	bf 93       	push	r27
    1fa0:	ef 93       	push	r30
    1fa2:	ff 93       	push	r31
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
   if(g_CallBackPtr2!=NULL)
    1fac:	80 91 a3 00 	lds	r24, 0x00A3
    1fb0:	90 91 a4 00 	lds	r25, 0x00A4
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	29 f0       	breq	.+10     	; 0x1fc2 <__vector_4+0x40>
      {
	   (*g_CallBackPtr2)();
    1fb8:	e0 91 a3 00 	lds	r30, 0x00A3
    1fbc:	f0 91 a4 00 	lds	r31, 0x00A4
    1fc0:	09 95       	icall
      }

}
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	ff 91       	pop	r31
    1fc8:	ef 91       	pop	r30
    1fca:	bf 91       	pop	r27
    1fcc:	af 91       	pop	r26
    1fce:	9f 91       	pop	r25
    1fd0:	8f 91       	pop	r24
    1fd2:	7f 91       	pop	r23
    1fd4:	6f 91       	pop	r22
    1fd6:	5f 91       	pop	r21
    1fd8:	4f 91       	pop	r20
    1fda:	3f 91       	pop	r19
    1fdc:	2f 91       	pop	r18
    1fde:	0f 90       	pop	r0
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	0f 90       	pop	r0
    1fe4:	1f 90       	pop	r1
    1fe6:	18 95       	reti

00001fe8 <__vector_19>:

/*ISR for Timer 0  Compare mode */
ISR(TIMER0_COMP_vect)
{
    1fe8:	1f 92       	push	r1
    1fea:	0f 92       	push	r0
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	0f 92       	push	r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	2f 93       	push	r18
    1ff4:	3f 93       	push	r19
    1ff6:	4f 93       	push	r20
    1ff8:	5f 93       	push	r21
    1ffa:	6f 93       	push	r22
    1ffc:	7f 93       	push	r23
    1ffe:	8f 93       	push	r24
    2000:	9f 93       	push	r25
    2002:	af 93       	push	r26
    2004:	bf 93       	push	r27
    2006:	ef 93       	push	r30
    2008:	ff 93       	push	r31
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr0!=NULL)
    2012:	80 91 9f 00 	lds	r24, 0x009F
    2016:	90 91 a0 00 	lds	r25, 0x00A0
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	29 f0       	breq	.+10     	; 0x2028 <__vector_19+0x40>
	      {
		   (*g_CallBackPtr0)();
    201e:	e0 91 9f 00 	lds	r30, 0x009F
    2022:	f0 91 a0 00 	lds	r31, 0x00A0
    2026:	09 95       	icall
	      }
}
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	ff 91       	pop	r31
    202e:	ef 91       	pop	r30
    2030:	bf 91       	pop	r27
    2032:	af 91       	pop	r26
    2034:	9f 91       	pop	r25
    2036:	8f 91       	pop	r24
    2038:	7f 91       	pop	r23
    203a:	6f 91       	pop	r22
    203c:	5f 91       	pop	r21
    203e:	4f 91       	pop	r20
    2040:	3f 91       	pop	r19
    2042:	2f 91       	pop	r18
    2044:	0f 90       	pop	r0
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	0f 90       	pop	r0
    204a:	1f 90       	pop	r1
    204c:	18 95       	reti

0000204e <__vector_6>:

/*ISR for Timer 1  Compare mode */
ISR(TIMER1_COMPA_vect)
{
    204e:	1f 92       	push	r1
    2050:	0f 92       	push	r0
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	0f 92       	push	r0
    2056:	11 24       	eor	r1, r1
    2058:	2f 93       	push	r18
    205a:	3f 93       	push	r19
    205c:	4f 93       	push	r20
    205e:	5f 93       	push	r21
    2060:	6f 93       	push	r22
    2062:	7f 93       	push	r23
    2064:	8f 93       	push	r24
    2066:	9f 93       	push	r25
    2068:	af 93       	push	r26
    206a:	bf 93       	push	r27
    206c:	ef 93       	push	r30
    206e:	ff 93       	push	r31
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr1!=NULL)
    2078:	80 91 a1 00 	lds	r24, 0x00A1
    207c:	90 91 a2 00 	lds	r25, 0x00A2
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	29 f0       	breq	.+10     	; 0x208e <__vector_6+0x40>
	      {
		   (*g_CallBackPtr1)();
    2084:	e0 91 a1 00 	lds	r30, 0x00A1
    2088:	f0 91 a2 00 	lds	r31, 0x00A2
    208c:	09 95       	icall
	      }
}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	ff 91       	pop	r31
    2094:	ef 91       	pop	r30
    2096:	bf 91       	pop	r27
    2098:	af 91       	pop	r26
    209a:	9f 91       	pop	r25
    209c:	8f 91       	pop	r24
    209e:	7f 91       	pop	r23
    20a0:	6f 91       	pop	r22
    20a2:	5f 91       	pop	r21
    20a4:	4f 91       	pop	r20
    20a6:	3f 91       	pop	r19
    20a8:	2f 91       	pop	r18
    20aa:	0f 90       	pop	r0
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	0f 90       	pop	r0
    20b0:	1f 90       	pop	r1
    20b2:	18 95       	reti

000020b4 <__vector_3>:

/*ISR for Timer 2  Compare mode */
ISR(TIMER2_COMP_vect)
{
    20b4:	1f 92       	push	r1
    20b6:	0f 92       	push	r0
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	0f 92       	push	r0
    20bc:	11 24       	eor	r1, r1
    20be:	2f 93       	push	r18
    20c0:	3f 93       	push	r19
    20c2:	4f 93       	push	r20
    20c4:	5f 93       	push	r21
    20c6:	6f 93       	push	r22
    20c8:	7f 93       	push	r23
    20ca:	8f 93       	push	r24
    20cc:	9f 93       	push	r25
    20ce:	af 93       	push	r26
    20d0:	bf 93       	push	r27
    20d2:	ef 93       	push	r30
    20d4:	ff 93       	push	r31
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr2!=NULL)
    20de:	80 91 a3 00 	lds	r24, 0x00A3
    20e2:	90 91 a4 00 	lds	r25, 0x00A4
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	29 f0       	breq	.+10     	; 0x20f4 <__vector_3+0x40>
	      {
		   (*g_CallBackPtr2)();
    20ea:	e0 91 a3 00 	lds	r30, 0x00A3
    20ee:	f0 91 a4 00 	lds	r31, 0x00A4
    20f2:	09 95       	icall
	      }
}
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	ff 91       	pop	r31
    20fa:	ef 91       	pop	r30
    20fc:	bf 91       	pop	r27
    20fe:	af 91       	pop	r26
    2100:	9f 91       	pop	r25
    2102:	8f 91       	pop	r24
    2104:	7f 91       	pop	r23
    2106:	6f 91       	pop	r22
    2108:	5f 91       	pop	r21
    210a:	4f 91       	pop	r20
    210c:	3f 91       	pop	r19
    210e:	2f 91       	pop	r18
    2110:	0f 90       	pop	r0
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	0f 90       	pop	r0
    2116:	1f 90       	pop	r1
    2118:	18 95       	reti

0000211a <TIMER_init>:



void TIMER_init(const TIMER_config  * configOfTimer  )
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <TIMER_init+0x6>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01

	if(configOfTimer ->channel == timer1)
    2128:	e9 81       	ldd	r30, Y+1	; 0x01
    212a:	fa 81       	ldd	r31, Y+2	; 0x02
    212c:	80 81       	ld	r24, Z
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	29 f4       	brne	.+10     	; 0x213c <TIMER_init+0x22>
	{
		TIMER1_init(configOfTimer);
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	0e 94 73 11 	call	0x22e6	; 0x22e6 <TIMER1_init>
    213a:	0e c0       	rjmp	.+28     	; 0x2158 <TIMER_init+0x3e>
	}
	else if (configOfTimer ->channel == timer0)
    213c:	e9 81       	ldd	r30, Y+1	; 0x01
    213e:	fa 81       	ldd	r31, Y+2	; 0x02
    2140:	80 81       	ld	r24, Z
    2142:	88 23       	and	r24, r24
    2144:	29 f4       	brne	.+10     	; 0x2150 <TIMER_init+0x36>
	{
			TIMER0_init(configOfTimer);
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	0e 94 b1 10 	call	0x2162	; 0x2162 <TIMER0_init>
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <TIMER_init+0x3e>
	}
	else
	{
		TIMER2_init(configOfTimer);
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	0e 94 12 11 	call	0x2224	; 0x2224 <TIMER2_init>

	}
}
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <TIMER0_init>:
 * 3. set Compare unit or display it
 * 4. Enable the Timer Interrupt.
 * 5.Set the required clock.
 */
static void TIMER0_init( const TIMER_config  * configOfTimer )
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	00 d0       	rcall	.+0      	; 0x2168 <TIMER0_init+0x6>
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (1<<FOC0) | (TCCR0 |  (configOfTimer ->waveMode.TIMER_0_2_waveMode <<WGM01 ) ) | (TCCR0 | (configOfTimer ->compOut ) <<COM00) |(TCCR0|configOfTimer->clock.Timer_0_1_clock);
    2170:	a3 e5       	ldi	r26, 0x53	; 83
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e3 e5       	ldi	r30, 0x53	; 83
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	28 2f       	mov	r18, r24
    217c:	e9 81       	ldd	r30, Y+1	; 0x01
    217e:	fa 81       	ldd	r31, Y+2	; 0x02
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	88 2f       	mov	r24, r24
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	82 2b       	or	r24, r18
    2194:	28 2f       	mov	r18, r24
    2196:	20 68       	ori	r18, 0x80	; 128
    2198:	e3 e5       	ldi	r30, 0x53	; 83
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	38 2f       	mov	r19, r24
    21a0:	e9 81       	ldd	r30, Y+1	; 0x01
    21a2:	fa 81       	ldd	r31, Y+2	; 0x02
    21a4:	81 81       	ldd	r24, Z+1	; 0x01
    21a6:	88 2f       	mov	r24, r24
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	82 95       	swap	r24
    21ac:	92 95       	swap	r25
    21ae:	90 7f       	andi	r25, 0xF0	; 240
    21b0:	98 27       	eor	r25, r24
    21b2:	80 7f       	andi	r24, 0xF0	; 240
    21b4:	98 27       	eor	r25, r24
    21b6:	83 2b       	or	r24, r19
    21b8:	28 2b       	or	r18, r24
    21ba:	e3 e5       	ldi	r30, 0x53	; 83
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	90 81       	ld	r25, Z
    21c0:	e9 81       	ldd	r30, Y+1	; 0x01
    21c2:	fa 81       	ldd	r31, Y+2	; 0x02
    21c4:	83 81       	ldd	r24, Z+3	; 0x03
    21c6:	89 2b       	or	r24, r25
    21c8:	82 2b       	or	r24, r18
    21ca:	8c 93       	st	X, r24
	TCNT0=configOfTimer->initalValue;
    21cc:	a2 e5       	ldi	r26, 0x52	; 82
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e9 81       	ldd	r30, Y+1	; 0x01
    21d2:	fa 81       	ldd	r31, Y+2	; 0x02
    21d4:	84 81       	ldd	r24, Z+4	; 0x04
    21d6:	95 81       	ldd	r25, Z+5	; 0x05
    21d8:	8c 93       	st	X, r24

	if (configOfTimer->waveMode.TIMER_0_2_waveMode == TIMER_0_2_Normal )
    21da:	e9 81       	ldd	r30, Y+1	; 0x01
    21dc:	fa 81       	ldd	r31, Y+2	; 0x02
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	88 23       	and	r24, r24
    21e2:	41 f4       	brne	.+16     	; 0x21f4 <TIMER0_init+0x92>
		TIMSK |= (1<<TOIE0);
    21e4:	a9 e5       	ldi	r26, 0x59	; 89
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e9 e5       	ldi	r30, 0x59	; 89
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	81 60       	ori	r24, 0x01	; 1
    21f0:	8c 93       	st	X, r24
    21f2:	13 c0       	rjmp	.+38     	; 0x221a <TIMER0_init+0xb8>

	else if (configOfTimer->waveMode.TIMER_0_2_waveMode== TIMER_0_2_CTC)
    21f4:	e9 81       	ldd	r30, Y+1	; 0x01
    21f6:	fa 81       	ldd	r31, Y+2	; 0x02
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	71 f4       	brne	.+28     	; 0x221a <TIMER0_init+0xb8>
	{
		TIMSK |= (1<<OCIE0);
    21fe:	a9 e5       	ldi	r26, 0x59	; 89
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e9 e5       	ldi	r30, 0x59	; 89
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	82 60       	ori	r24, 0x02	; 2
    220a:	8c 93       	st	X, r24
		OCR0 = configOfTimer->finalValue;
    220c:	ac e5       	ldi	r26, 0x5C	; 92
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e9 81       	ldd	r30, Y+1	; 0x01
    2212:	fa 81       	ldd	r31, Y+2	; 0x02
    2214:	86 81       	ldd	r24, Z+6	; 0x06
    2216:	97 81       	ldd	r25, Z+7	; 0x07
    2218:	8c 93       	st	X, r24
	}
}
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <TIMER2_init>:


 static void TIMER2_init( const TIMER_config  * configOfTimer )
 {
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	00 d0       	rcall	.+0      	; 0x222a <TIMER2_init+0x6>
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
 	TCCR2 = (1<<FOC2) | (TCCR2 |  (configOfTimer ->waveMode.TIMER_0_2_waveMode <<WGM21 ) ) | (TCCR2 | (configOfTimer ->compOut) <<COM20) |(TCCR2|configOfTimer->clock.Timer_2_clock);
    2232:	a5 e4       	ldi	r26, 0x45	; 69
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e5 e4       	ldi	r30, 0x45	; 69
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	28 2f       	mov	r18, r24
    223e:	e9 81       	ldd	r30, Y+1	; 0x01
    2240:	fa 81       	ldd	r31, Y+2	; 0x02
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	82 2b       	or	r24, r18
    2256:	28 2f       	mov	r18, r24
    2258:	20 68       	ori	r18, 0x80	; 128
    225a:	e5 e4       	ldi	r30, 0x45	; 69
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	38 2f       	mov	r19, r24
    2262:	e9 81       	ldd	r30, Y+1	; 0x01
    2264:	fa 81       	ldd	r31, Y+2	; 0x02
    2266:	81 81       	ldd	r24, Z+1	; 0x01
    2268:	88 2f       	mov	r24, r24
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	82 95       	swap	r24
    226e:	92 95       	swap	r25
    2270:	90 7f       	andi	r25, 0xF0	; 240
    2272:	98 27       	eor	r25, r24
    2274:	80 7f       	andi	r24, 0xF0	; 240
    2276:	98 27       	eor	r25, r24
    2278:	83 2b       	or	r24, r19
    227a:	28 2b       	or	r18, r24
    227c:	e5 e4       	ldi	r30, 0x45	; 69
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	90 81       	ld	r25, Z
    2282:	e9 81       	ldd	r30, Y+1	; 0x01
    2284:	fa 81       	ldd	r31, Y+2	; 0x02
    2286:	83 81       	ldd	r24, Z+3	; 0x03
    2288:	89 2b       	or	r24, r25
    228a:	82 2b       	or	r24, r18
    228c:	8c 93       	st	X, r24
 	TCNT2=configOfTimer->initalValue;
    228e:	a4 e4       	ldi	r26, 0x44	; 68
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e9 81       	ldd	r30, Y+1	; 0x01
    2294:	fa 81       	ldd	r31, Y+2	; 0x02
    2296:	84 81       	ldd	r24, Z+4	; 0x04
    2298:	95 81       	ldd	r25, Z+5	; 0x05
    229a:	8c 93       	st	X, r24

 	if (configOfTimer->waveMode.TIMER_0_2_waveMode == TIMER_0_2_Normal )
    229c:	e9 81       	ldd	r30, Y+1	; 0x01
    229e:	fa 81       	ldd	r31, Y+2	; 0x02
    22a0:	82 81       	ldd	r24, Z+2	; 0x02
    22a2:	88 23       	and	r24, r24
    22a4:	41 f4       	brne	.+16     	; 0x22b6 <TIMER2_init+0x92>
 		TIMSK |= (1<<TOIE2);
    22a6:	a9 e5       	ldi	r26, 0x59	; 89
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e9 e5       	ldi	r30, 0x59	; 89
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	80 64       	ori	r24, 0x40	; 64
    22b2:	8c 93       	st	X, r24
    22b4:	13 c0       	rjmp	.+38     	; 0x22dc <TIMER2_init+0xb8>

 	else if (configOfTimer->waveMode.TIMER_0_2_waveMode== TIMER_0_2_CTC)
    22b6:	e9 81       	ldd	r30, Y+1	; 0x01
    22b8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	81 30       	cpi	r24, 0x01	; 1
    22be:	71 f4       	brne	.+28     	; 0x22dc <TIMER2_init+0xb8>
 	{
 		TIMSK |= (1<<OCIE2);
    22c0:	a9 e5       	ldi	r26, 0x59	; 89
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e9 e5       	ldi	r30, 0x59	; 89
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	80 68       	ori	r24, 0x80	; 128
    22cc:	8c 93       	st	X, r24
 		OCR2 = configOfTimer->finalValue;
    22ce:	a3 e4       	ldi	r26, 0x43	; 67
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e9 81       	ldd	r30, Y+1	; 0x01
    22d4:	fa 81       	ldd	r31, Y+2	; 0x02
    22d6:	86 81       	ldd	r24, Z+6	; 0x06
    22d8:	97 81       	ldd	r25, Z+7	; 0x07
    22da:	8c 93       	st	X, r24
 	}
 }
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <TIMER1_init>:


static void TIMER1_init( const TIMER_config  * configOfTimer )
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <TIMER1_init+0x6>
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <TIMER1_init+0x8>
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
	 * 3) we assign the value of the clock in TCCR1B register
	 * 4)assign initial value in TCNT1 register
	 * 6) Put the top value in OCR1A or  ICR1 in case of CTC mode
	 * 7) enable the suitable interrupt
	 */
	TCCR1A = (1<<FOC1A) |(1<<FOC1B) | ( TCCR1A | (configOfTimer->waveMode.TIMER1_waveMode &0x03) ) | (TCCR1A |(configOfTimer->compOut << COM1A0) ) ;
    22f6:	af e4       	ldi	r26, 0x4F	; 79
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	ef e4       	ldi	r30, 0x4F	; 79
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	98 2f       	mov	r25, r24
    2302:	e9 81       	ldd	r30, Y+1	; 0x01
    2304:	fa 81       	ldd	r31, Y+2	; 0x02
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	83 70       	andi	r24, 0x03	; 3
    230a:	89 2b       	or	r24, r25
    230c:	28 2f       	mov	r18, r24
    230e:	2c 60       	ori	r18, 0x0C	; 12
    2310:	ef e4       	ldi	r30, 0x4F	; 79
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	38 2f       	mov	r19, r24
    2318:	e9 81       	ldd	r30, Y+1	; 0x01
    231a:	fa 81       	ldd	r31, Y+2	; 0x02
    231c:	81 81       	ldd	r24, Z+1	; 0x01
    231e:	88 2f       	mov	r24, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	00 24       	eor	r0, r0
    2324:	96 95       	lsr	r25
    2326:	87 95       	ror	r24
    2328:	07 94       	ror	r0
    232a:	96 95       	lsr	r25
    232c:	87 95       	ror	r24
    232e:	07 94       	ror	r0
    2330:	98 2f       	mov	r25, r24
    2332:	80 2d       	mov	r24, r0
    2334:	83 2b       	or	r24, r19
    2336:	82 2b       	or	r24, r18
    2338:	8c 93       	st	X, r24
	TCCR1B = ( TCCR1B | ( (configOfTimer->waveMode.TIMER1_waveMode &0x0C) <<1 ) ) |(TCCR1B | configOfTimer->clock.Timer_0_1_clock);
    233a:	ae e4       	ldi	r26, 0x4E	; 78
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	ee e4       	ldi	r30, 0x4E	; 78
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	28 2f       	mov	r18, r24
    2346:	e9 81       	ldd	r30, Y+1	; 0x01
    2348:	fa 81       	ldd	r31, Y+2	; 0x02
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	8c 70       	andi	r24, 0x0C	; 12
    2352:	90 70       	andi	r25, 0x00	; 0
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	28 2b       	or	r18, r24
    235a:	ee e4       	ldi	r30, 0x4E	; 78
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	90 81       	ld	r25, Z
    2360:	e9 81       	ldd	r30, Y+1	; 0x01
    2362:	fa 81       	ldd	r31, Y+2	; 0x02
    2364:	83 81       	ldd	r24, Z+3	; 0x03
    2366:	89 2b       	or	r24, r25
    2368:	82 2b       	or	r24, r18
    236a:	8c 93       	st	X, r24
	TCNT1=configOfTimer->initalValue;
    236c:	ac e4       	ldi	r26, 0x4C	; 76
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e9 81       	ldd	r30, Y+1	; 0x01
    2372:	fa 81       	ldd	r31, Y+2	; 0x02
    2374:	84 81       	ldd	r24, Z+4	; 0x04
    2376:	95 81       	ldd	r25, Z+5	; 0x05
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	9c 93       	st	X, r25
    237c:	8e 93       	st	-X, r24

	switch (configOfTimer->waveMode.TIMER1_waveMode)
    237e:	e9 81       	ldd	r30, Y+1	; 0x01
    2380:	fa 81       	ldd	r31, Y+2	; 0x02
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	3c 83       	std	Y+4, r19	; 0x04
    238a:	2b 83       	std	Y+3, r18	; 0x03
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	84 30       	cpi	r24, 0x04	; 4
    2392:	91 05       	cpc	r25, r1
    2394:	89 f0       	breq	.+34     	; 0x23b8 <TIMER1_init+0xd2>
    2396:	2b 81       	ldd	r18, Y+3	; 0x03
    2398:	3c 81       	ldd	r19, Y+4	; 0x04
    239a:	2c 30       	cpi	r18, 0x0C	; 12
    239c:	31 05       	cpc	r19, r1
    239e:	e9 f0       	breq	.+58     	; 0x23da <TIMER1_init+0xf4>
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	49 f5       	brne	.+82     	; 0x23fa <TIMER1_init+0x114>
	{
		case TIMER1_Normal: TIMSK |= (1<<TOIE1); break; // OCR1A VALUE ??
    23a8:	a9 e5       	ldi	r26, 0x59	; 89
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e9 e5       	ldi	r30, 0x59	; 89
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	84 60       	ori	r24, 0x04	; 4
    23b4:	8c 93       	st	X, r24
    23b6:	21 c0       	rjmp	.+66     	; 0x23fa <TIMER1_init+0x114>

		case TIMER1_CTC_OCR1A : OCR1A = configOfTimer->finalValue;
    23b8:	aa e4       	ldi	r26, 0x4A	; 74
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e9 81       	ldd	r30, Y+1	; 0x01
    23be:	fa 81       	ldd	r31, Y+2	; 0x02
    23c0:	86 81       	ldd	r24, Z+6	; 0x06
    23c2:	97 81       	ldd	r25, Z+7	; 0x07
    23c4:	11 96       	adiw	r26, 0x01	; 1
    23c6:	9c 93       	st	X, r25
    23c8:	8e 93       	st	-X, r24
								TIMSK |= (1<<OCIE1A); break;
    23ca:	a9 e5       	ldi	r26, 0x59	; 89
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e9 e5       	ldi	r30, 0x59	; 89
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	80 61       	ori	r24, 0x10	; 16
    23d6:	8c 93       	st	X, r24
    23d8:	10 c0       	rjmp	.+32     	; 0x23fa <TIMER1_init+0x114>

		case TIMER1_CTC_ICR1 :  ICR1 = configOfTimer->finalValue;
    23da:	a6 e4       	ldi	r26, 0x46	; 70
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e9 81       	ldd	r30, Y+1	; 0x01
    23e0:	fa 81       	ldd	r31, Y+2	; 0x02
    23e2:	86 81       	ldd	r24, Z+6	; 0x06
    23e4:	97 81       	ldd	r25, Z+7	; 0x07
    23e6:	11 96       	adiw	r26, 0x01	; 1
    23e8:	9c 93       	st	X, r25
    23ea:	8e 93       	st	-X, r24
								TIMSK |= (1<<OCIE1A); break;
    23ec:	a9 e5       	ldi	r26, 0x59	; 89
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e9 e5       	ldi	r30, 0x59	; 89
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	80 61       	ori	r24, 0x10	; 16
    23f8:	8c 93       	st	X, r24

	}

}
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <Timer0_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*ptr0Func)(void))

{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <Timer0_setCallBack+0x6>
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
  g_CallBackPtr0=ptr0Func;
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	90 93 a0 00 	sts	0x00A0, r25
    241e:	80 93 9f 00 	sts	0x009F, r24

}
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <Timer1_setCallBack>:
void Timer1_setCallBack(void(*ptr1Func)(void))

{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	00 d0       	rcall	.+0      	; 0x2432 <Timer1_setCallBack+0x6>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
  g_CallBackPtr1=ptr1Func;
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	90 93 a2 00 	sts	0x00A2, r25
    2442:	80 93 a1 00 	sts	0x00A1, r24

}
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <Timer2_setCallBack>:
void Timer2_setCallBack(void(*ptr2Func)(void))

{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	00 d0       	rcall	.+0      	; 0x2456 <Timer2_setCallBack+0x6>
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
  g_CallBackPtr2=ptr2Func;
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	9a 81       	ldd	r25, Y+2	; 0x02
    2462:	90 93 a4 00 	sts	0x00A4, r25
    2466:	80 93 a3 00 	sts	0x00A3, r24
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <USART_init>:
}
#endif


void USART_init(const usart_configType * a_configrations)
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	00 d0       	rcall	.+0      	; 0x247a <USART_init+0x6>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	9a 83       	std	Y+2, r25	; 0x02
    2480:	89 83       	std	Y+1, r24	; 0x01
	/* we work on double speed mode */
	SET_BIT( UCSRA  , U2X);  	/* UCSRA|=(1<<USX); */
    2482:	ab e2       	ldi	r26, 0x2B	; 43
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	eb e2       	ldi	r30, 0x2B	; 43
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	82 60       	ori	r24, 0x02	; 2
    248e:	8c 93       	st	X, r24
		UCSRB|=(a_configrations->RX_or_TX << TXCIE);
	 }
	#endif

	 /* clear register to make sure that every bit =0 before assign any value on it */
	UCSRB=0; UCSRC=0;
    2490:	ea e2       	ldi	r30, 0x2A	; 42
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	10 82       	st	Z, r1
    2496:	e0 e4       	ldi	r30, 0x40	; 64
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	10 82       	st	Z, r1

	/* enable TX or RX or Both */
	UCSRB |=(a_configrations->RX_or_TX << TXEN);
    249c:	aa e2       	ldi	r26, 0x2A	; 42
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	ea e2       	ldi	r30, 0x2A	; 42
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	28 2f       	mov	r18, r24
    24a8:	e9 81       	ldd	r30, Y+1	; 0x01
    24aa:	fa 81       	ldd	r31, Y+2	; 0x02
    24ac:	83 81       	ldd	r24, Z+3	; 0x03
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	82 2b       	or	r24, r18
    24c0:	8c 93       	st	X, r24
	 * USBS    = number of stop bits
	 * UCSZ1:0 = number of bits data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	/* ex : UCSRC=(UCSRC& 0XF9)| (1 << UCSZ0) */
	 UCSRC |= (1<<URSEL)|(a_configrations->numOfBits << UCSZ0)|(a_configrations->parityBit <<UPM0)|(a_configrations->numOfstopBit <<USBS);
    24c2:	a0 e4       	ldi	r26, 0x40	; 64
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e0 e4       	ldi	r30, 0x40	; 64
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	38 2f       	mov	r19, r24
    24ce:	e9 81       	ldd	r30, Y+1	; 0x01
    24d0:	fa 81       	ldd	r31, Y+2	; 0x02
    24d2:	80 81       	ld	r24, Z
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	28 2f       	mov	r18, r24
    24de:	20 68       	ori	r18, 0x80	; 128
    24e0:	e9 81       	ldd	r30, Y+1	; 0x01
    24e2:	fa 81       	ldd	r31, Y+2	; 0x02
    24e4:	81 81       	ldd	r24, Z+1	; 0x01
    24e6:	88 2f       	mov	r24, r24
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	82 95       	swap	r24
    24ec:	92 95       	swap	r25
    24ee:	90 7f       	andi	r25, 0xF0	; 240
    24f0:	98 27       	eor	r25, r24
    24f2:	80 7f       	andi	r24, 0xF0	; 240
    24f4:	98 27       	eor	r25, r24
    24f6:	28 2b       	or	r18, r24
    24f8:	e9 81       	ldd	r30, Y+1	; 0x01
    24fa:	fa 81       	ldd	r31, Y+2	; 0x02
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	82 2b       	or	r24, r18
    2510:	83 2b       	or	r24, r19
    2512:	8c 93       	st	X, r24

	 if (a_configrations->modeSelect == Synchronous) // if work on synchronous mode
    2514:	e9 81       	ldd	r30, Y+1	; 0x01
    2516:	fa 81       	ldd	r31, Y+2	; 0x02
    2518:	84 81       	ldd	r24, Z+4	; 0x04
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	39 f4       	brne	.+14     	; 0x252c <USART_init+0xb8>
		 UCSRC|= (1<<UMSEL);
    251e:	a0 e4       	ldi	r26, 0x40	; 64
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e0 e4       	ldi	r30, 0x40	; 64
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	80 64       	ori	r24, 0x40	; 64
    252a:	8c 93       	st	X, r24

	 /* Adjust the baud rate  */
	 UBRRH = BAUDRATE_PRESCALE >>8;
    252c:	e0 e4       	ldi	r30, 0x40	; 64
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	10 82       	st	Z, r1
	 UBRRL=BAUDRATE_PRESCALE;
    2532:	e9 e2       	ldi	r30, 0x29	; 41
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	8c e0       	ldi	r24, 0x0C	; 12
    2538:	80 83       	st	Z, r24

}
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <USART_sendByte>:

void USART_sendByte(const uint8 data)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	0f 92       	push	r0
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	89 83       	std	Y+1, r24	; 0x01
	/* *****************steps *********************
	 * Loop until the previous data all transmitted
	 * put the new data in the UDR to be transmitted
	 * when data i put in UDR then the UDRE is cleared automatic
	 * ******************************************** */
	while (BIT_IS_CLEAR(UCSRA , UDRE));
    2550:	eb e2       	ldi	r30, 0x2B	; 43
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	80 72       	andi	r24, 0x20	; 32
    255c:	90 70       	andi	r25, 0x00	; 0
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	b9 f3       	breq	.-18     	; 0x2550 <USART_sendByte+0xc>
	UDR= data;
    2562:	ec e2       	ldi	r30, 0x2C	; 44
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	80 83       	st	Z, r24
	   UDR =data;
	   while(BIT_IS_CLEAR(UCSRA , TXC);
	   SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *************************************************/
	#endif
}
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <USART_recieveByte>:
uint8 USART_recieveByte(void)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
#else
	/* *****************steps *********************
	 * Loop until the data are received
	 * then return the UDR which contain the data
	 * ******************************************** */
	while(BIT_IS_CLEAR(UCSRA , RXC));
    257a:	eb e2       	ldi	r30, 0x2B	; 43
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	88 23       	and	r24, r24
    2582:	dc f7       	brge	.-10     	; 0x257a <USART_recieveByte+0x8>
	return UDR;
    2584:	ec e2       	ldi	r30, 0x2C	; 44
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
#endif
}
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <USART_sendString>:

void USART_sendString(const uint8 *str)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	00 d0       	rcall	.+0      	; 0x2596 <USART_sendString+0x6>
    2596:	0f 92       	push	r0
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	9b 83       	std	Y+3, r25	; 0x03
    259e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    25a0:	19 82       	std	Y+1, r1	; 0x01
    25a2:	0e c0       	rjmp	.+28     	; 0x25c0 <USART_sendString+0x30>
	while(str[i] !='\0')
	{
		USART_sendByte(str[i]);
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	9b 81       	ldd	r25, Y+3	; 0x03
    25ae:	fc 01       	movw	r30, r24
    25b0:	e2 0f       	add	r30, r18
    25b2:	f3 1f       	adc	r31, r19
    25b4:	80 81       	ld	r24, Z
    25b6:	0e 94 a2 12 	call	0x2544	; 0x2544 <USART_sendByte>
		i++;
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	8f 5f       	subi	r24, 0xFF	; 255
    25be:	89 83       	std	Y+1, r24	; 0x01
}

void USART_sendString(const uint8 *str)
{
	uint8 i=0;
	while(str[i] !='\0')
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	fc 01       	movw	r30, r24
    25cc:	e2 0f       	add	r30, r18
    25ce:	f3 1f       	adc	r31, r19
    25d0:	80 81       	ld	r24, Z
    25d2:	88 23       	and	r24, r24
    25d4:	39 f7       	brne	.-50     	; 0x25a4 <USART_sendString+0x14>
	{
		UART_sendByte(*str);
		str++;
	}
	*******************************************************************/
}
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <USART_receiveString>:
void USART_receiveString(uint8 *str) /* Receive until #*/
{
    25e2:	0f 93       	push	r16
    25e4:	1f 93       	push	r17
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <USART_receiveString+0xa>
    25ec:	0f 92       	push	r0
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	9b 83       	std	Y+3, r25	; 0x03
    25f4:	8a 83       	std	Y+2, r24	; 0x02
	/* in USART we send the string with # in last character of the string
	 * so we recieve the string until #and replace it with null '\0' */
	uint8 i=-1;
    25f6:	8f ef       	ldi	r24, 0xFF	; 255
    25f8:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		i++;
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	89 83       	std	Y+1, r24	; 0x01
		str[i]=USART_recieveByte();
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	9b 81       	ldd	r25, Y+3	; 0x03
    260a:	8c 01       	movw	r16, r24
    260c:	02 0f       	add	r16, r18
    260e:	13 1f       	adc	r17, r19
    2610:	0e 94 b9 12 	call	0x2572	; 0x2572 <USART_recieveByte>
    2614:	f8 01       	movw	r30, r16
    2616:	80 83       	st	Z, r24
	}while (str[i] !='#');
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	9b 81       	ldd	r25, Y+3	; 0x03
    2622:	fc 01       	movw	r30, r24
    2624:	e2 0f       	add	r30, r18
    2626:	f3 1f       	adc	r31, r19
    2628:	80 81       	ld	r24, Z
    262a:	83 32       	cpi	r24, 0x23	; 35
    262c:	31 f7       	brne	.-52     	; 0x25fa <USART_receiveString+0x18>

	/* add the null at last of string */
	str[i]='\0';
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	9b 81       	ldd	r25, Y+3	; 0x03
    2638:	fc 01       	movw	r30, r24
    263a:	e2 0f       	add	r30, r18
    263c:	f3 1f       	adc	r31, r19
    263e:	10 82       	st	Z, r1
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	1f 91       	pop	r17
    264c:	0f 91       	pop	r16
    264e:	08 95       	ret

00002650 <__prologue_saves__>:
    2650:	2f 92       	push	r2
    2652:	3f 92       	push	r3
    2654:	4f 92       	push	r4
    2656:	5f 92       	push	r5
    2658:	6f 92       	push	r6
    265a:	7f 92       	push	r7
    265c:	8f 92       	push	r8
    265e:	9f 92       	push	r9
    2660:	af 92       	push	r10
    2662:	bf 92       	push	r11
    2664:	cf 92       	push	r12
    2666:	df 92       	push	r13
    2668:	ef 92       	push	r14
    266a:	ff 92       	push	r15
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	ca 1b       	sub	r28, r26
    267a:	db 0b       	sbc	r29, r27
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	09 94       	ijmp

00002688 <__epilogue_restores__>:
    2688:	2a 88       	ldd	r2, Y+18	; 0x12
    268a:	39 88       	ldd	r3, Y+17	; 0x11
    268c:	48 88       	ldd	r4, Y+16	; 0x10
    268e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2690:	6e 84       	ldd	r6, Y+14	; 0x0e
    2692:	7d 84       	ldd	r7, Y+13	; 0x0d
    2694:	8c 84       	ldd	r8, Y+12	; 0x0c
    2696:	9b 84       	ldd	r9, Y+11	; 0x0b
    2698:	aa 84       	ldd	r10, Y+10	; 0x0a
    269a:	b9 84       	ldd	r11, Y+9	; 0x09
    269c:	c8 84       	ldd	r12, Y+8	; 0x08
    269e:	df 80       	ldd	r13, Y+7	; 0x07
    26a0:	ee 80       	ldd	r14, Y+6	; 0x06
    26a2:	fd 80       	ldd	r15, Y+5	; 0x05
    26a4:	0c 81       	ldd	r16, Y+4	; 0x04
    26a6:	1b 81       	ldd	r17, Y+3	; 0x03
    26a8:	aa 81       	ldd	r26, Y+2	; 0x02
    26aa:	b9 81       	ldd	r27, Y+1	; 0x01
    26ac:	ce 0f       	add	r28, r30
    26ae:	d1 1d       	adc	r29, r1
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	ed 01       	movw	r28, r26
    26bc:	08 95       	ret

000026be <itoa>:
    26be:	fb 01       	movw	r30, r22
    26c0:	9f 01       	movw	r18, r30
    26c2:	e8 94       	clt
    26c4:	42 30       	cpi	r20, 0x02	; 2
    26c6:	c4 f0       	brlt	.+48     	; 0x26f8 <itoa+0x3a>
    26c8:	45 32       	cpi	r20, 0x25	; 37
    26ca:	b4 f4       	brge	.+44     	; 0x26f8 <itoa+0x3a>
    26cc:	4a 30       	cpi	r20, 0x0A	; 10
    26ce:	29 f4       	brne	.+10     	; 0x26da <itoa+0x1c>
    26d0:	97 fb       	bst	r25, 7
    26d2:	1e f4       	brtc	.+6      	; 0x26da <itoa+0x1c>
    26d4:	90 95       	com	r25
    26d6:	81 95       	neg	r24
    26d8:	9f 4f       	sbci	r25, 0xFF	; 255
    26da:	64 2f       	mov	r22, r20
    26dc:	77 27       	eor	r23, r23
    26de:	0e 94 90 13 	call	0x2720	; 0x2720 <__udivmodhi4>
    26e2:	80 5d       	subi	r24, 0xD0	; 208
    26e4:	8a 33       	cpi	r24, 0x3A	; 58
    26e6:	0c f0       	brlt	.+2      	; 0x26ea <itoa+0x2c>
    26e8:	89 5d       	subi	r24, 0xD9	; 217
    26ea:	81 93       	st	Z+, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	a1 f7       	brne	.-24     	; 0x26da <itoa+0x1c>
    26f2:	16 f4       	brtc	.+4      	; 0x26f8 <itoa+0x3a>
    26f4:	5d e2       	ldi	r21, 0x2D	; 45
    26f6:	51 93       	st	Z+, r21
    26f8:	10 82       	st	Z, r1
    26fa:	c9 01       	movw	r24, r18
    26fc:	0c 94 80 13 	jmp	0x2700	; 0x2700 <strrev>

00002700 <strrev>:
    2700:	dc 01       	movw	r26, r24
    2702:	fc 01       	movw	r30, r24
    2704:	67 2f       	mov	r22, r23
    2706:	71 91       	ld	r23, Z+
    2708:	77 23       	and	r23, r23
    270a:	e1 f7       	brne	.-8      	; 0x2704 <strrev+0x4>
    270c:	32 97       	sbiw	r30, 0x02	; 2
    270e:	04 c0       	rjmp	.+8      	; 0x2718 <strrev+0x18>
    2710:	7c 91       	ld	r23, X
    2712:	6d 93       	st	X+, r22
    2714:	70 83       	st	Z, r23
    2716:	62 91       	ld	r22, -Z
    2718:	ae 17       	cp	r26, r30
    271a:	bf 07       	cpc	r27, r31
    271c:	c8 f3       	brcs	.-14     	; 0x2710 <strrev+0x10>
    271e:	08 95       	ret

00002720 <__udivmodhi4>:
    2720:	aa 1b       	sub	r26, r26
    2722:	bb 1b       	sub	r27, r27
    2724:	51 e1       	ldi	r21, 0x11	; 17
    2726:	07 c0       	rjmp	.+14     	; 0x2736 <__udivmodhi4_ep>

00002728 <__udivmodhi4_loop>:
    2728:	aa 1f       	adc	r26, r26
    272a:	bb 1f       	adc	r27, r27
    272c:	a6 17       	cp	r26, r22
    272e:	b7 07       	cpc	r27, r23
    2730:	10 f0       	brcs	.+4      	; 0x2736 <__udivmodhi4_ep>
    2732:	a6 1b       	sub	r26, r22
    2734:	b7 0b       	sbc	r27, r23

00002736 <__udivmodhi4_ep>:
    2736:	88 1f       	adc	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	5a 95       	dec	r21
    273c:	a9 f7       	brne	.-22     	; 0x2728 <__udivmodhi4_loop>
    273e:	80 95       	com	r24
    2740:	90 95       	com	r25
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	08 95       	ret

00002748 <_exit>:
    2748:	f8 94       	cli

0000274a <__stop_program>:
    274a:	ff cf       	rjmp	.-2      	; 0x274a <__stop_program>
